'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.UdpRequestMessage=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _common=require('../common');class UdpRequestMessage extends _common.Message{constructor(options){super();const fields=_extends({RSV:[_common.NOOP,_common.NOOP],FRAG:_common.NOOP,ATYP:_common.ATYP_V4,DSTADDR:[_common.NOOP],DSTPORT:[_common.NOOP,_common.NOOP],DATA:[_common.NOOP]},options);this.RSV=fields.RSV;this.FRAG=fields.FRAG;this.ATYP=fields.ATYP;this.DSTADDR=fields.DSTADDR;this.DSTPORT=fields.DSTPORT;this.DATA=fields.DATA}static parse(buffer){if(buffer.length<7){return null}if(buffer[0]!==_common.NOOP||buffer[1]!==_common.NOOP){return null}const addrTypes=[_common.ATYP_V4,_common.ATYP_DOMAIN,_common.ATYP_V6];if(!addrTypes.includes(buffer[3])){return null}let DSTADDR=null;let DSTPORT=null;switch(buffer[3]){case _common.ATYP_DOMAIN:DSTADDR=buffer.slice(5,5+buffer[4]);DSTPORT=buffer.slice(5+buffer[4],7+buffer[4]);break;case _common.ATYP_V6:DSTADDR=buffer.slice(4,20);DSTPORT=buffer.slice(20,22);break;default:DSTADDR=buffer.slice(4,8);DSTPORT=buffer.slice(8,10);break;}return new UdpRequestMessage({RSV:[_common.NOOP,_common.NOOP],FRAG:buffer[2],ATYP:buffer[3],DSTADDR,DSTPORT,DATA:buffer.slice(6+DSTADDR.length)})}}exports.UdpRequestMessage=UdpRequestMessage;