'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.HttpRequestMessage=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _common=require('../common');class HttpRequestMessage extends _common.Message{constructor(options={}){super();const fields=_extends({},options);this.METHOD=fields.METHOD;this.URI=fields.URI;this.VERSION=fields.VERSION;this.HOST=fields.HOST}static parse(buffer){if(buffer.length<20){return null}const str=buffer.toString();const lines=str.split('\r\n');if(lines.length<4){return null}var _lines$0$split=lines[0].split(' '),_lines$0$split2=_slicedToArray(_lines$0$split,3);const method=_lines$0$split2[0],uri=_lines$0$split2[1],version=_lines$0$split2[2];const methods=['OPTIONS','GET','HEAD','POST','PUT','DELETE','TRACE','CONNECT'];if(methods.includes(method)){const headers=lines.slice(1,-2);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=headers[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const header=_step.value;if(header.startsWith('Host: ')){const host=header.split(' ')[1];return new HttpRequestMessage({METHOD:Buffer.from(method),URI:Buffer.from(uri),VERSION:Buffer.from(version),HOST:Buffer.from(host)})}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}}return null}}exports.HttpRequestMessage=HttpRequestMessage;