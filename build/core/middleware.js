'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Middleware=exports.MIDDLEWARE_DIRECTION_DOWNWARD=exports.MIDDLEWARE_DIRECTION_UPWARD=undefined;exports.createMiddleware=createMiddleware;var _events=require('events');var _events2=_interopRequireDefault(_events);var _logger=require('./logger');var _logger2=_interopRequireDefault(_logger);var _utils=require('../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const MIDDLEWARE_DIRECTION_UPWARD=exports.MIDDLEWARE_DIRECTION_UPWARD=1;const MIDDLEWARE_DIRECTION_DOWNWARD=exports.MIDDLEWARE_DIRECTION_DOWNWARD=-1;class Middleware extends _events2.default{constructor(impl){super();this._broadcast=null;this._impl=null;this._impl=impl}getName(){return(0,_utils.kebabCase)(this._impl.constructor.name).replace(/(.*)-preset/i,'$1')}subscribe(receiver){this._broadcast=receiver}onNotified(action){return this._impl.onNotified(action)}write(direction,{buffer,direct,fail}){const type={[MIDDLEWARE_DIRECTION_UPWARD]:'Out',[MIDDLEWARE_DIRECTION_DOWNWARD]:'In'}[direction];const broadcast=this._broadcast;const _fail=message=>fail(this.getName(),message);const next=(buf)=>{const args={buffer:buf,next:(processed,isReverse=false)=>{const hasListener=this.emit(`next_${isReverse?-direction:direction}`,processed);if(!hasListener){direct(processed,isReverse)}},broadcast,direct,fail:_fail};const ret=__IS_CLIENT__?this._impl[`client${type}`](args):this._impl[`server${type}`](args);if(ret instanceof Buffer){args.next(ret)}};const r=this._impl[`before${type}`]({buffer,next,broadcast,direct,fail:_fail});if(r instanceof Buffer){next(r)}}}exports.Middleware=Middleware;function createMiddleware(name,params={}){try{const ImplClass=require(`../presets/${name}`).default;const impl=new ImplClass(params);checkMiddleware(ImplClass.name,impl);return new Middleware(impl)}catch(err){_logger2.default.error(err.message);process.exit(-1)}return null}function checkMiddleware(name,impl){const requiredMethods=['clientOut','serverIn','serverOut','clientIn'];if(requiredMethods.some(method=>typeof impl[method]!=='function')){throw Error(`all methods [${requiredMethods.toString()}] in ${name} must be implemented`)}return true}