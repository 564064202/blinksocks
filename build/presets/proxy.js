'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _net=require('net');var _net2=_interopRequireDefault(_net);var _ip=require('ip');var _ip2=_interopRequireDefault(_ip);var _defs=require('./defs');var _proxies=require('../proxies');var _utils=require('../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const MODE_PROXY=0;const MODE_TUNNEL=1;function getHostType(host){if(_net2.default.isIPv4(host)){return _proxies.ATYP_V4}if(_net2.default.isIPv6(host)){return _proxies.ATYP_V6}return _proxies.ATYP_DOMAIN}class ProxyPreset extends _defs.IPreset{constructor({host,port}){super();this._proxy=null;this._mode=MODE_PROXY;this._host=null;this._port=null;this._isTunnelReady=false;this._isBroadCasting=false;this._staging=Buffer.alloc(0);if(typeof host!=='undefined'&&!(0,_utils.isValidHostname)(host)){throw Error('host is invalid')}if(typeof port!=='undefined'&&!(0,_utils.isValidPort)(port)){throw Error('port is invalid')}if(host&&port){this._mode=MODE_TUNNEL;this._host=host;this._port=port}}handleProxy({buffer,next,broadcast}){if(this._proxy===null){this._proxy=new _proxies.Proxifier({onHandshakeDone:(addr,callback)=>{var _ref=[addr.type,addr.type===_proxies.ATYP_DOMAIN?addr.host.toString():_ip2.default.toString(addr.host),addr.port.readUInt16BE(0)];const type=_ref[0],host=_ref[1],port=_ref[2];broadcast({type:_defs.SOCKET_CONNECT_TO_REMOTE,payload:{targetAddress:{type,host,port},onConnected:()=>callback(next)}})}})}if(!this._proxy.isDone()){const feedback=buf=>next(buf,true);this._proxy.makeHandshake(feedback,buffer)}else{return buffer}}handleTunnel({buffer,next,broadcast}){if(!this._isTunnelReady){if(this._isBroadCasting){this._staging=Buffer.concat([this._staging,buffer])}else{broadcast({type:_defs.SOCKET_CONNECT_TO_REMOTE,payload:{targetAddress:{type:getHostType(this._host),host:this._host,port:this._port},onConnected:()=>{this._isTunnelReady=true;this._isBroadCasting=false;next(Buffer.concat([this._staging,buffer]))}}});this._isBroadCasting=true}}else{return buffer}}clientOut(props){if(this._mode===MODE_PROXY){return this.handleProxy(props)}if(this._mode===MODE_TUNNEL){return this.handleTunnel(props)}}serverIn(props){if(this._mode===MODE_PROXY){return this.handleProxy(props)}if(this._mode===MODE_TUNNEL){return this.handleTunnel(props)}}}exports.default=ProxyPreset;