'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _net=require('net');var _net2=_interopRequireDefault(_net);var _ip=require('ip');var _ip2=_interopRequireDefault(_ip);var _utils=require('../utils');var _defs=require('./defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class ExpBaseWithPaddingPreset extends _defs.IPreset{constructor({salt}){super();this._isHandshakeDone=false;this._isBroadCasting=false;this._staging=Buffer.alloc(0);this._host=null;this._port=null;this._padding=null;if(typeof salt!=='string'||salt===''){throw Error('\'salt\' must be set to a non-empty string')}this._padding=(0,_utils.hash)('sha256',salt).slice(0,15)}onNotified(action){if(__IS_CLIENT__&&action.type===_defs.SOCKET_CONNECT_TO_REMOTE){var _action$payload=action.payload;const host=_action$payload.host,port=_action$payload.port;this._host=Buffer.from(host);this._port=(0,_utils.numberToBuffer)(port)}}clientOut({buffer}){if(!this._isHandshakeDone){this._isHandshakeDone=true;return Buffer.concat([(0,_utils.numberToBuffer)(this._host.length,1),this._padding,this._host,this._port,buffer])}else{return buffer}}serverIn({buffer,next,broadcast,fail}){if(!this._isHandshakeDone){if(this._isBroadCasting){this._staging=Buffer.concat([this._staging,buffer]);return}if(buffer.length<20){return fail(`unexpected buffer length: ${buffer.length}, buffer=${buffer.toString('hex')}`)}if(!buffer.slice(1,16).equals(this._padding)){return fail(`unexpected padding=${this._padding.toString('hex')}`)}const alen=buffer[0];if(buffer.length<=alen+18){return fail(`unexpected buffer length: ${buffer.length}, buffer=${buffer.toString('hex')}`)}let addr=buffer.slice(16,16+alen);if((0,_utils.isValidHostname)(addr.toString())){addr=addr.toString()}else if(_net2.default.isIP(addr)){addr=_ip2.default.toString(addr)}else{return fail(`invalid addr: (${addr.toString()})`)}const port=buffer.slice(alen+16,alen+18).readUInt16BE(0);const data=buffer.slice(alen+18);this._isBroadCasting=true;broadcast({type:_defs.SOCKET_CONNECT_TO_REMOTE,payload:{host:addr,port:port,onConnected:()=>{next(Buffer.concat([data,this._staging]));this._isHandshakeDone=true;this._isBroadCasting=false;this._staging=null}}})}else{return buffer}}}exports.default=ExpBaseWithPaddingPreset;