'use strict';var _AdvancedBuffer=require('../AdvancedBuffer');describe('AdvancedBuffer#constructor',function(){it('should throw when lens is not Array',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:null})}).toThrow()});it('should throw when lens.length is not 2',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[1]})}).toThrow();expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[1,2,3]})}).toThrow()});it('should throw when lens[0] < 0',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[-1,0]})}).toThrow()});it('should throw when lens[0] >= lens[1]',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[1,0]})}).toThrow();expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[1,1]})}).toThrow()});it('should throw when lens range > 6',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[0,7]})}).toThrow();expect(function(){return new _AdvancedBuffer.AdvancedBuffer({lens:[1,8]})}).toThrow()});it('should throw when getPacketLength not Function',function(){expect(function(){return new _AdvancedBuffer.AdvancedBuffer({getPacketLength:null})}).toThrow()})});describe('AdvancedBuffer#put',function(){it('should throw when pass a non-buffer to put() ',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer;expect(function(){return buffer.put()}).toThrow()});it('should leave one byte',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer;var callback=jest.fn();buffer.on('data',callback);buffer.put(new Buffer([0,2]));// emit
buffer.put(new Buffer([0]));buffer.put(new Buffer([2,0]));// emit
buffer.put(new Buffer([3]));buffer.put(new Buffer([0,255]));// emit
expect(buffer.getRest().equals(new Buffer([255]))).toBeTruthy();expect(callback).toHaveBeenCalledTimes(3)})});describe('AdvancedBuffer#digest',function(){it('should fully digest [0xff, 0x00, 0x03]',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer({lens:[1,2]});var callback=jest.fn();buffer.on('data',callback);var data=new Buffer([255,0,3]);expect(buffer.digest(data).equals(Buffer.from([]))).toBeTruthy()});it('should fully digest [0x00, 0x02, 0x00, 0x03, 0x04]',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer;var callback=jest.fn();buffer.on('data',callback);var data=new Buffer([0,2,0,3,4]);expect(buffer.digest(data).equals(Buffer.from([]))).toBeTruthy();expect(callback).toHaveBeenCalledTimes(2)});it('should not fully digest',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer({lens:[1,2]});var callback=jest.fn();buffer.on('data',callback);var data=new Buffer([255,0,3,0,0]);expect(buffer.digest(data).equals(Buffer.from([0,0]))).toBeTruthy();expect(callback).toHaveBeenCalledTimes(1)});it('should not digest',function(){var buffer=new _AdvancedBuffer.AdvancedBuffer;var callback=jest.fn();buffer.on('data',callback);var data=new Buffer([0,5,3,1]);expect(buffer.digest(data).equals(data)).toBeTruthy();expect(callback).not.toHaveBeenCalled()})});