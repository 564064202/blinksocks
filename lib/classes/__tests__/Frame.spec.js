'use strict';var _Encapsulator=require('../Encapsulator');describe('Frame#constructor',function(){it('should return expected buffer',function(){var frame=new _Encapsulator.Frame;var buffer=Buffer.from([0,0,1,0,0,0,0,0,0]);expect(frame.toBuffer().equals(buffer)).toBe(true)})});describe('Frame#parse',function(){it('should return null if buffer.length < 9',function(){expect(_Encapsulator.Frame.parse([0])).toBe(null)});it('should return null if buffer.length != LEN',function(){expect(_Encapsulator.Frame.parse([0,9,1,0,0,0,0,0,0,255])).toBe(null)});it('should return null if ATYP is invalid',function(){expect(_Encapsulator.Frame.parse([0,9,0,0,0,0,0,0,0])).toBe(null)});it('should return null if domain length is wrong',function(){expect(_Encapsulator.Frame.parse([0,9,3,10,0,0,0,0,0])).toBe(null)});it('should return null if ipv6\'s length is less than 21',function(){expect(_Encapsulator.Frame.parse([0,20,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])).toBe(null)});it('should return non-null',function(){expect(_Encapsulator.Frame.parse([0,9,3,3,1,2,3,0,0])).not.toBe(null);expect(_Encapsulator.Frame.parse([0,22,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])).not.toBe(null)})});