'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Connection=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _Constants=require('../../socks5/Constants');function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}var Connection=exports.Connection=function(){function Connection(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Connection);var fields=_extends({ATYP:_Constants.ATYP_V4,DSTADDR:[_Constants.NOOP,_Constants.NOOP,_Constants.NOOP,_Constants.NOOP],DSTPORT:[_Constants.NOOP,_Constants.NOOP]},options);if(![_Constants.ATYP_V4,_Constants.ATYP_V6,_Constants.ATYP_DOMAIN].includes(fields.ATYP)){throw Error('ATYP should be ATYP_V4, ATYP_V6 or ATYP_DOMAIN')}if(!Array.isArray(fields.DSTADDR)&&!(fields.DSTADDR instanceof Buffer)){throw Error('DSTADDR must be Array or buffer')}if(fields.ATYP===_Constants.ATYP_V4&&fields.DSTADDR.length!==4){throw Error('DSTADDR.length must be 4')}if(fields.ATYP===_Constants.ATYP_V6&&fields.DSTADDR.length!==16){throw Error('DSTADDR.length must be 16')}if(!Array.isArray(fields.DSTPORT)&&!(fields.DSTPORT instanceof Buffer)){throw Error('DSTPORT must be Array or Buffer')}if(fields.DSTPORT.length!==2){throw Error('DSTPORT.length must be 2')}this.ATYP=fields.ATYP;this.DSTADDR=fields.DSTADDR;this.DSTPORT=fields.DSTPORT}/**
   * convert DSTADDR and DSTPORT to String and Number
   * @returns {[*,*]}
   */_createClass(Connection,[{key:'getEndPoint',value:function getEndPoint(){var ATYP=this.ATYP,DSTADDR=this.DSTADDR,DSTPORT=this.DSTPORT;var host=null;switch(ATYP){case _Constants.ATYP_V4:host=DSTADDR.join('.');break;case _Constants.ATYP_V6:// TODO: fix here
host='['+DSTADDR.map(function(u){return u.toString(16)}).join(':')+']';break;case _Constants.ATYP_DOMAIN:host=DSTADDR.toString();break;default:throw Error('unknown ATYP: '+ATYP);}var port=Buffer.from(DSTPORT).readUInt16BE(0);return[host,port]}},{key:'toString',value:function toString(){return this.getEndPoint().join(':')}}]);return Connection}();