'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Socket=undefined;var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _log4js=require('log4js');var _log4js2=_interopRequireDefault(_log4js);var _Connection=require('../Connection');var _Relay=require('../Relay');var _Crypto=require('../Crypto');var _Config=require('../Config');var _Encapsulator=require('../Encapsulator');var _socks=require('../../socks5');var _Constants=require('../../socks5/Constants');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}var Logger=_log4js2.default.getLogger('Socket');var Socket=exports.Socket=function(){function Socket(_ref){var _this=this;var id=_ref.id,socket=_ref.socket;_classCallCheck(this,Socket);this._id=null;this._socket=null;this._relay=null;this._socksReady=false;this._connection=null;this._decipher=null;this._cipher=null;this._iv=null;Logger.setLevel(_Config.Config.log_level);this._id=id;this._socket=socket;this.updateCiphers();// events
socket.on('error',function(err){return _this.onError(socket,err)});socket.on('close',function(had_error){return _this.onClose(socket,had_error)});socket.on('data',function(buffer){return _this.onReceiving(socket,buffer)});Logger.info('client['+this._id+'] connected')}_createClass(Socket,[{key:'obtainIV',value:function obtainIV(buffer){if(buffer.length<_Crypto.CRYPTO_IV_LEN+9){if(Logger.isFatalEnabled()){Logger.fatal('cannot obtain iv from client, packet is too small ('+buffer.length+'bytes)')}return null}return buffer.slice(-_Crypto.CRYPTO_IV_LEN)}},{key:'updateCiphers',value:function updateCiphers(){var _this2=this;var collector=function collector(buffer){return _this2.onReceived(buffer)};var iv=this.iv===null?undefined:this._iv;this._cipher=_Crypto.Crypto.createCipher(collector,iv);this._decipher=_Crypto.Crypto.createDecipher(collector,iv)}},{key:'getRelay',value:function getRelay(){if(this._relay===null){this._relay=new _Relay.Relay({id:this._id,socket:this._socket})}return this._relay}},{key:'onReceiving',value:function onReceiving(socket,buffer){// socks5 handshake, client only
if(!this._socksReady&&!_Config.Config.isServer){this.onSocksHandshake(socket,buffer);return}if(_Config.Config.isServer){this._decipher.write(buffer)}else{// send with iv if needed
if(this._iv===null&&_Config.Config.use_iv){this._iv=_Crypto.Crypto.generateIV();this._cipher.write(_Encapsulator.Encapsulator.pack(this._connection,Buffer.concat([buffer,this._iv])).toBuffer());// update relay ciphers
this.getRelay().setIV(this._iv);// update _cipher and _decipher to use iv
this.updateCiphers();return}// send normal packet
this._cipher.write(_Encapsulator.Encapsulator.pack(this._connection,buffer).toBuffer())}}},{key:'onReceived',value:function onReceived(buffer){var relay=this.getRelay();if(_Config.Config.isServer){// obtain iv from the first packet if needed
if(this._iv===null&&_Config.Config.use_iv){this._iv=this.obtainIV(buffer);if(this._iv===null){this._socket.end();this._socket.destroy();return}var buf=buffer.slice(0,buffer.length-_Crypto.CRYPTO_IV_LEN);var newLen=_Encapsulator.Encapsulator.numberToArray(buf.readUInt16BE(0)-_Crypto.CRYPTO_IV_LEN);buf[0]=newLen[0];buf[1]=newLen[1];relay.setIV(this._iv);relay.forwardToDst(buf);// update _cipher and _decipher to use iv
this.updateCiphers();return}relay.forwardToDst(buffer)}else{relay.forwardToServer(buffer)}}},{key:'onError',value:function onError(socket,err){switch(err.code){case'ECONNRESET':Logger.warn('client['+this._id+'] '+err.message);return;case'EPIPE':Logger.warn('client['+this._id+'] '+err.message);return;default:Logger.error(err);break;}}},{key:'onClose',value:function onClose(socket,had_error){if(had_error){Logger.warn('client['+this._id+'] closed due to a transmission error')}else{Logger.info('client['+this._id+'] closed normally')}if(this._relay!==null){this._relay.close()}}},{key:'onSocksHandshake',value:function onSocksHandshake(socket,buffer){// 1. IDENTIFY
var identifier=_socks.IdentifierMessage.parse(buffer);if(identifier!==null){var message=new _socks.SelectMessage;socket.write(message.toBuffer());return}// 2. REQUEST
var request=_socks.RequestMessage.parse(buffer);if(request&&request.CMD===_Constants.REQUEST_COMMAND_CONNECT){this._connection=new _Connection.Connection({ATYP:request.ATYP,DSTADDR:request.DSTADDR,DSTPORT:request.DSTPORT});// ACK
var _message=new _socks.ReplyMessage({REP:_Constants.REPLY_SUCCEEDED});socket.write(_message.toBuffer());this._socksReady=true;// done.
}}}]);return Socket}();