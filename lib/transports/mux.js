'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.MuxOutbound=exports.MuxInbound=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _defs=require('./defs');var _defs2=require('../presets/defs');class MuxInbound extends _defs.Inbound{constructor(props){super(props);this.onDrain=this.onDrain.bind(this);if(__IS_SERVER__){const inbound=this.ctx.muxRelay.getInbound();inbound.on('drain',this.onDrain)}else{}}get bufferSize(){if(__IS_CLIENT__){const totalBufferSize=0;return totalBufferSize}else{const inbound=this.ctx.muxRelay.getInbound();if(inbound){return inbound.bufferSize}else{return 0}}}onBroadcast(action){const socket=this.ctx.socket;switch(action.type){case _defs2.CONNECT_TO_REMOTE:socket&&socket.pause();break;case _defs2.CONNECTED_TO_REMOTE:socket&&socket.resume();break;default:break;}}onDrain(){this.emit('drain')}write(buffer){if(__IS_SERVER__){var _ctx=this.ctx;const muxRelay=_ctx.muxRelay,cid=_ctx.cid;muxRelay.encode(buffer,{cid})}}end(){this.close()}close(){const doClose=()=>{if(__IS_SERVER__){var _ctx2=this.ctx;const muxRelay=_ctx2.muxRelay,cid=_ctx2.cid;const inbound=muxRelay.getInbound();if(inbound){inbound.removeListener('drain',this.onDrain)}muxRelay.destroySubRelay(cid)}if(!this._destroyed){this._destroyed=true;this.emit('close')}};if(this.bufferSize>0){this.once('drain',doClose)}else{doClose()}}}exports.MuxInbound=MuxInbound;class MuxOutbound extends _defs.Outbound{constructor(props){super(props);this._isFirstFrame=true;this.onDrain=this.onDrain.bind(this);if(__IS_CLIENT__){const outbound=this.ctx.muxRelay.getOutbound();outbound.on('drain',this.onDrain)}else{}}get bufferSize(){if(__IS_CLIENT__){const outbound=this.ctx.muxRelay.getOutbound();if(outbound){return outbound.bufferSize}else{return 0}}else{const totalBufferSize=0;return totalBufferSize}}onDrain(){this.emit('drain')}write(buffer){if(__IS_CLIENT__){var _ctx3=this.ctx;const muxRelay=_ctx3.muxRelay,proxyRequest=_ctx3.proxyRequest,cid=_ctx3.cid;if(this._isFirstFrame){this._isFirstFrame=false;muxRelay.encode(buffer,_extends({cid},proxyRequest))}else{muxRelay.encode(buffer,{cid})}}}end(){this.close()}close(){const doClose=()=>{if(__IS_CLIENT__){var _ctx4=this.ctx;const muxRelay=_ctx4.muxRelay,cid=_ctx4.cid;const outbound=muxRelay.getOutbound();if(outbound){outbound.removeListener('drain',this.onDrain)}muxRelay.destroySubRelay(cid)}if(!this._destroyed){this._destroyed=true;this.emit('close')}};if(this.bufferSize>0){this.once('drain',doClose)}else{doClose()}}}exports.MuxOutbound=MuxOutbound;