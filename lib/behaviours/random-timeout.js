'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _utils=require('../utils');function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const DEFAULT_TIMEOUT_MIN=10;const DEFAULT_TIMEOUT_MAX=40;class RandomTimeoutBehaviour{constructor({min,max}){this.min=DEFAULT_TIMEOUT_MIN;this.max=DEFAULT_TIMEOUT_MAX;if(min!==undefined){if(!Number.isInteger(min)){throw Error('\'min\' must be an integer')}if(min<0){throw Error('\'min\' must be greater than 0')}}if(max!==undefined){if(!Number.isInteger(max)){throw Error('\'max\' must be an integer')}if(max<0){throw Error('\'max\' must be greater than 0')}}if(min!==undefined&&max!==undefined&&min>max){throw Error('\'max\' must be greater than or equal to \'min\'')}this.min=min!==undefined?min:DEFAULT_TIMEOUT_MIN;this.max=max!==undefined?max:DEFAULT_TIMEOUT_MAX}run({remoteHost,remotePort,onClose}){var _this=this;return _asyncToGenerator(function*(){const timeout=(0,_utils.getRandomInt)(_this.min,_this.max);_utils.logger.warn(`[behaviour] [${remoteHost}:${remotePort}] connection will be closed in ${timeout}s...`);return new Promise(function(resolve){setTimeout(function(){onClose();resolve()},timeout*1e3)})})()}}exports.default=RandomTimeoutBehaviour;