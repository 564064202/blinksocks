'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Hub=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _cluster=require('cluster');var _cluster2=_interopRequireDefault(_cluster);var _events=require('events');var _events2=_interopRequireDefault(_events);var _net=require('net');var _net2=_interopRequireDefault(_net);var _tls=require('tls');var _tls2=_interopRequireDefault(_tls);var _ws=require('ws');var _ws2=_interopRequireDefault(_ws);var _balancer=require('./balancer');var _config=require('./config');var _middleware=require('./middleware');var MiddlewareManager=_interopRequireWildcard(_middleware);var _relay=require('./relay');var _utils=require('../utils');var _proxies=require('../proxies');function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key]}}newObj.default=obj;return newObj}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}class Hub extends _events2.default{constructor(config){super();this._isFirstWorker=_cluster2.default.worker?_cluster2.default.worker.id<=1:true;this._server=null;this._fastestServer=null;this._relays=[];this._onConnection=this._onConnection.bind(this);this._onClose=this._onClose.bind(this);if(config!==undefined){_config.Config.init(config)}}run(){var _this=this;return _asyncToGenerator(function*(){if(_this._server!==null){_this.terminate()}_this._server=yield _this._createServer();if(_this._isFirstWorker){_utils.logger.info(`[hub] blinksocks ${__IS_CLIENT__?'client':'server'} running at ${__LOCAL_PROTOCOL__}://${__LOCAL_HOST__}:${__LOCAL_PORT__}`)}if(__IS_CLIENT__){_this._isFirstWorker&&_utils.logger.info('[balancer] started');_balancer.Balancer.start(__SERVERS__)}})()}terminate(){this._onClose()}_createServer(){var _this2=this;return _asyncToGenerator(function*(){const address={host:__LOCAL_HOST__,port:__LOCAL_PORT__};return new Promise(function(resolve){let server=null;if(__IS_CLIENT__){if(['tcp'].includes(__LOCAL_PROTOCOL__)){server=_proxies.tcp.createServer()}else if(['socks','socks4','socks4a','socks5'].includes(__LOCAL_PROTOCOL__)){server=_proxies.socks.createServer()}else if(['http','https'].includes(__LOCAL_PROTOCOL__)){server=_proxies.http.createServer()}server.on('proxyConnection',_this2._onConnection);server.on('close',_this2._onClose);server.listen(address,function(){return resolve(server)})}else{if(__LOCAL_PROTOCOL__==='tcp'){server=_net2.default.createServer();server.on('connection',_this2._onConnection);server.on('close',_this2._onClose);server.listen(address,function(){return resolve(server)})}else if(__LOCAL_PROTOCOL__==='ws'){const server=new _ws2.default.Server(_extends({},address,{perMessageDeflate:false}));server.on('connection',function(ws,req){ws.remoteAddress=req.connection.remoteAddress;ws.remotePort=req.connection.remotePort;_this2._onConnection(ws)});server.on('listening',function(){return resolve(server)})}else if(__LOCAL_PROTOCOL__==='tls'){const server=_tls2.default.createServer({key:[__TLS_KEY__],cert:[__TLS_CERT__]});server.on('secureConnection',_this2._onConnection);server.on('close',_this2._onClose);server.listen(address,function(){return resolve(server)})}}})})()}_selectServer(){const server=_balancer.Balancer.getFastest();if(this._fastestServer===null||server.id!==this._fastestServer.id){this._fastestServer=server;_config.Config.initServer(server);MiddlewareManager.reset();_utils.logger.info(`[balancer] use server: ${__SERVER_HOST__}:${__SERVER_PORT__}`)}}_onConnection(context,proxyRequest=null){if(__IS_CLIENT__){this._selectServer()}_utils.logger.verbose(`[hub] [${context.remoteAddress}:${context.remotePort}] connected`);const relay=(0,_relay.createRelay)(__TRANSPORT__,context,proxyRequest);relay.on('close',()=>this._onRelayClose(relay.id));this._relays.push(relay)}_onRelayClose(id){this._relays=this._relays.filter(relay=>relay.id!==id)}_onClose(){if(this._server!==null){this._relays.forEach(relay=>relay.destroy());this._relays=null;MiddlewareManager.cleanup();if(__IS_CLIENT__){_balancer.Balancer.destroy();this._isFirstWorker&&_utils.logger.info('[balancer] stopped')}this._server.close();this._server=null;this._isFirstWorker&&_utils.logger.info('[hub] shutdown');this.emit('close')}}}exports.Hub=Hub;