'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Hub=undefined;var _cluster=require('cluster');var _cluster2=_interopRequireDefault(_cluster);var _events=require('events');var _events2=_interopRequireDefault(_events);var _net=require('net');var _net2=_interopRequireDefault(_net);var _tls=require('tls');var _tls2=_interopRequireDefault(_tls);var _lodash=require('lodash.uniqueid');var _lodash2=_interopRequireDefault(_lodash);var _balancer=require('./balancer');var _config=require('./config');var _relay=require('./relay');var _middleware=require('./middleware');var _utils=require('../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}class Hub extends _events2.default{constructor(config){super();this._isFirstWorker=_cluster2.default.worker?_cluster2.default.worker.id<=1:true;this._localServer=null;this._fastestServer=null;this._relays=[];this.onConnect=this.onConnect.bind(this);this.onClose=this.onClose.bind(this);if(config!==undefined){_config.Config.init(config)}if(this._isFirstWorker){_utils.logger.info(`==> [hub] use configuration: ${JSON.stringify(__ALL_CONFIG__)}`);_utils.logger.info(`==> [hub] running as: ${__IS_SERVER__?'server':'client'}`)}if(__IS_CLIENT__){this._isFirstWorker&&_utils.logger.info('==> [balancer] started');_balancer.Balancer.start(__SERVERS__)}}run(){var _this=this;return _asyncToGenerator(function*(){const options={host:__LOCAL_HOST__,port:__LOCAL_PORT__};_this._localServer=_this.createServer();_this._localServer.on('close',_this.onClose);return new Promise(function(resolve){return _this._localServer.listen(options,resolve)})})()}terminate(){if(this._localServer===null){return}this._localServer.close();this._localServer=null;this._isFirstWorker&&_utils.logger.info('==> [hub] shutdown');if(__IS_CLIENT__){_balancer.Balancer.destroy();this._isFirstWorker&&_utils.logger.info('==> [balancer] stopped')}}createServer(){if(__IS_SERVER__&&__IS_TLS__){const server=_tls2.default.createServer({key:[__TLS_KEY__],cert:[__TLS_CERT__]});server.on('secureConnection',this.onConnect);return server}else{const server=_net2.default.createServer();server.on('connection',this.onConnect);return server}}selectServer(){const server=_balancer.Balancer.getFastest();if(this._fastestServer===null||server.id!==this._fastestServer.id){this._fastestServer=server;_config.Config.initServer(server);_utils.logger.info(`[balancer] use: ${server.host}:${server.port}`)}}onConnect(socket){if(__IS_CLIENT__){this.selectServer()}const id=(0,_lodash2.default)();const relay=new _relay.Relay({socket});relay.id=id;relay.on('close',()=>{this._relays=this._relays.filter(relay=>relay.id!==id)});this._relays.push(relay);_utils.logger.verbose(`[hub] [${socket.remoteAddress}:${socket.remotePort}] connected`)}onClose(){this._relays.forEach(relay=>relay.destroy());this._relays=null;this._localServer=null;(0,_middleware.cleanup)();this.emit('close')}}exports.Hub=Hub;