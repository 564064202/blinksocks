'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Config=exports.DEFAULT_LOG_LEVEL=exports.DEFAULT_KEY=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _log4js=require('log4js');var _log4js2=_interopRequireDefault(_log4js);var _Crypto=require('../Crypto');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}else{return Array.from(arr)}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}var DEFAULT_KEY=exports.DEFAULT_KEY='my secret password';var DEFAULT_LOG_LEVEL=exports.DEFAULT_LOG_LEVEL='ERROR';var Config=exports.Config=function(){function Config(){_classCallCheck(this,Config)}_createClass(Config,null,[{key:'init',/**
   * parse config.json
   * @param json
   */value:function init(json){if((typeof json==='undefined'?'undefined':_typeof(json))!=='object'||Array.isArray(json)){throw Error('Invalid configuration file')}// host
if(typeof json.host!=='string'||json.host===''){throw Error('\'host\' must be provided and is not empty')}this.host=json.host;// port
if(!Number.isSafeInteger(json.port)||json.port<=0){throw Error('\'port\' must be a natural number')}this.port=json.port;// server_host & server_port
if(typeof json.server_host==='string'){if(json.server_host===''){throw Error('\'server_host\' must not be empty')}if(!Number.isSafeInteger(json.server_port)||json.server_port<=0){throw Error('\'server_port\' must be a natural number')}this._is_server=false}else{this._is_server=true}this.server_host=json.server_host;this.server_port=json.server_port;// key & cipher
if(typeof json.key!=='string'){throw Error('\'key\' must be a string and is not empty')}if(typeof json.cipher!=='string'){throw Error('\'cipher\' must be a string')}if(json.cipher!==''){if(!_Crypto.Crypto.isAvailable(json.cipher)){throw Error('cipher \''+json.cipher+'\' is not supported, use --ciphers to display all supported ciphers')}if(json.key===''||json.key===DEFAULT_KEY){throw Error('\'password\' must not be empty or \''+DEFAULT_KEY+'\'')}this.cipher=_Crypto.Crypto.getCipher(json.cipher);this.key=_Crypto.Crypto.getStrongKey(json.cipher,json.key)}else{this.cipher='';this.key='';console.warn('You haven\'t specify a cipher, this shall only be used in development or special cases.')}// protocol & protocol_params
this.protocol=json.protocol;this.protocol_params=json.protocol_params;// obfs & obfs_params
this.obfs=json.obfs;this.obfs_params=json.obfs_params;// log_level
this.setUpLogger(json.log_level||DEFAULT_LOG_LEVEL);this.setGlobals()}/**
   * make global constants
   */},{key:'setGlobals',value:function setGlobals(){global.__IS_SERVER__=this._is_server;global.__IS_CLIENT__=!this._is_server;global.__LOCAL_HOST__=this.host;global.__LOCAL_PORT__=this.port;global.__SERVER_HOST__=this.server_host;global.__SERVER_PORT__=this.server_port;global.__LOG_LEVEL__=this.log_level;global.__PROTOCOL__=this.protocol;global.__OBFS__=this.obfs;global.__CIPHER__=this.cipher;global.__KEY__=this.key}/**
   * configure log4js
   * @param level
   */},{key:'setUpLogger',value:function setUpLogger(){var level=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';// create logs directory
try{_fs2.default.lstatSync('logs')}catch(err){if(err.code==='ENOENT'){_fs2.default.mkdirSync('logs')}}// determine log level of log4js
var _level=level.toUpperCase();switch(_level){case'OFF':case'FATAL':case'ERROR':case'WARN':case'INFO':case'DEBUG':case'TRACE':case'ALL':break;default:_level=DEFAULT_LOG_LEVEL;break;}// configure log4js globally
var log4jsCommon={'appenders':[{'type':'console'}],'replaceConsole':true};if(process.env.NODE_ENV!=='test'){_log4js2.default.configure(_extends({},log4jsCommon,{'appenders':[].concat(_toConsumableArray(log4jsCommon.appenders),[{'type':'dateFile','filename':'logs/blinksocks.log','pattern':'-yyyy-MM-dd','alwaysIncludePattern':false}])}))}else{_log4js2.default.configure(_extends({},log4jsCommon,{'levels':{'console':_level}}))}this.log_level=_level}}]);return Config}();