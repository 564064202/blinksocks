'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Relay=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _events=require('events');var _events2=_interopRequireDefault(_events);var _pipe=require('./pipe');var _middleware=require('./middleware');var _utils=require('../utils');var _transports=require('../transports');var _defs=require('../presets/defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function getBounds(transport){const mapping={'tcp':[_transports.TcpInbound,_transports.TcpOutbound],'udp':[_transports.UdpInbound,_transports.UdpOutbound],'tls':[_transports.TlsInbound,_transports.TlsOutbound],'ws':[_transports.WsInbound,_transports.WsOutbound]};let Inbound=null;let Outbound=null;if(transport==='udp'){Inbound=_transports.UdpInbound;Outbound=_transports.UdpOutbound}else{var _ref=__IS_CLIENT__?[_transports.TcpInbound,mapping[transport][1]]:[mapping[transport][0],_transports.TcpOutbound];var _ref2=_slicedToArray(_ref,2);Inbound=_ref2[0];Outbound=_ref2[1]}return{Inbound,Outbound}}class Relay extends _events2.default{constructor({transport,remoteInfo,context=null,presets=[],isMux=false}){super();this._transport=null;this._isMux=false;this._remoteInfo=null;this._proxyRequest=null;this._inbound=null;this._outbound=null;this._pipe=null;this._presets=[];this.updatePresets=this.updatePresets.bind(this);this.onBroadcast=this.onBroadcast.bind(this);this.onEncoded=this.onEncoded.bind(this);this.onDecoded=this.onDecoded.bind(this);this._transport=transport;this._isMux=isMux;this._remoteInfo=remoteInfo;this._presets=this.preparePresets(presets);this._pipe=this.createPipe(this._presets);var _getBounds=getBounds(transport);const Inbound=_getBounds.Inbound,Outbound=_getBounds.Outbound;this._inbound=new Inbound({context,remoteInfo,pipe:this._pipe});this._outbound=new Outbound({remoteInfo,pipe:this._pipe});this._outbound.updatePresets=this.updatePresets;this._outbound.setInbound(this._inbound);this._inbound.updatePresets=this.updatePresets;this._inbound.setOutbound(this._outbound);this._inbound.on('close',()=>{this.destroy();this.emit('close')})}init({proxyRequest}){this._proxyRequest=proxyRequest;this._pipe.broadcast('pipe',{type:_defs.CONNECTION_CREATED,payload:_extends({transport:this._transport},this._remoteInfo)});if(proxyRequest){this._pipe.broadcast(null,{type:_defs.CONNECT_TO_REMOTE,payload:proxyRequest})}}onBroadcast(action){const type=action.type;if(__MUX__){switch(type){case _defs.CONNECT_TO_REMOTE:if(__IS_CLIENT__&&!this._isMux){return}if(__IS_SERVER__&&this._isMux){return}break;case _defs.MUX_NEW_CONN:return this.emit('muxNewConn',action.payload);case _defs.MUX_DATA_FRAME:return this.emit('muxDataFrame',action.payload);case _defs.MUX_CLOSE_CONN:return this.emit('muxCloseConn',action.payload);default:break;}}if(type===_defs.CHANGE_PRESET_SUITE){this.onChangePresetSuite(action);return}this._inbound&&this._inbound.onBroadcast(action);this._outbound&&this._outbound.onBroadcast(action)}onChangePresetSuite(action){var _action$payload=action.payload;const type=_action$payload.type,suite=_action$payload.suite,data=_action$payload.data;_utils.logger.verbose(`[relay] changing presets suite to: ${JSON.stringify(suite)}`);this.updatePresets(this.preparePresets([...suite.presets,{'name':'auto-conf'}]));const transport=this._transport;const proxyRequest=this._proxyRequest;this._pipe.broadcast('pipe',{type:_defs.CONNECTION_CREATED,payload:_extends({transport},this._remoteInfo)});if(__IS_CLIENT__){this._pipe.broadcast(null,{type:_defs.CONNECT_TO_REMOTE,payload:_extends({},proxyRequest,{keepAlive:true})})}this._pipe.feed(type,data)}onEncoded(buffer){if(this.hasListener('encode')){this.emit('encode',buffer)}else{if(__IS_CLIENT__){this._outbound.write(buffer)}else{this._inbound.write(buffer)}}}onDecoded(buffer){if(this.hasListener('decode')){this.emit('decode',buffer)}else{if(__IS_CLIENT__){this._inbound.write(buffer)}else{this._outbound.write(buffer)}}}encode(buffer,extraArgs){if(this._pipe){this._pipe.feed(_middleware.PIPE_ENCODE,buffer,extraArgs)}}decode(buffer,extraArgs){if(this._pipe){this._pipe.feed(_middleware.PIPE_DECODE,buffer,extraArgs)}}hasListener(name){return this.listenerCount(name)>0}isOutboundReady(){return this._outbound&&this._outbound.writable}preparePresets(presets){const first=presets[0];const last=presets[presets.length-1];if(this._isMux&&(!first||first.name!=='mux')){presets=[{'name':'mux'}].concat(presets)}if(!this._isMux&&(!last||last.name!=='tracker')){presets=presets.concat([{'name':'tracker'}])}return presets}updatePresets(value){this._presets=typeof value==='function'?value(this._presets):value;this._pipe.updateMiddlewares(this._presets)}createPipe(presets){const pipe=new _pipe.Pipe({presets,isUdp:this._transport==='udp'});pipe.on('broadcast',this.onBroadcast.bind(this));pipe.on(`post_${_middleware.PIPE_ENCODE}`,this.onEncoded);pipe.on(`post_${_middleware.PIPE_DECODE}`,this.onDecoded);return pipe}destroy(){this._pipe&&this._pipe.destroy();this._inbound&&this._inbound.destroy();this._outbound&&this._outbound.destroy();this._pipe=null;this._inbound=null;this._outbound=null;this._presets=null;this._remoteInfo=null;this._proxyRequest=null}}exports.Relay=Relay;