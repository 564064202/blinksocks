'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Relay=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _events=require('events');var _events2=_interopRequireDefault(_events);var _pipe=require('./pipe');var _middleware=require('./middleware');var _utils=require('../utils');var _presets=require('../presets');var _transports=require('../transports');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function preparePresets(presets){const last=presets[presets.length-1];if(!last||last.name!=='tracker'){presets=presets.concat([{'name':'tracker'}])}return presets}function getBounds(transport){const mapping={'tcp':[_transports.TcpInbound,_transports.TcpOutbound],'udp':[_transports.UdpInbound,_transports.UdpOutbound],'tls':[_transports.TlsInbound,_transports.TlsOutbound],'ws':[_transports.WsInbound,_transports.WsOutbound]};let Inbound=null;let Outbound=null;if(transport==='udp'){Inbound=_transports.UdpInbound;Outbound=_transports.UdpOutbound}else{var _ref=__IS_CLIENT__?[_transports.TcpInbound,mapping[transport][1]]:[mapping[transport][0],_transports.TcpOutbound];var _ref2=_slicedToArray(_ref,2);Inbound=_ref2[0];Outbound=_ref2[1]}return{Inbound,Outbound}}class Relay extends _events2.default{constructor({transport,context,proxyRequest=null}){super();this._transport=null;this._context=null;this._proxyRequest=null;this._inbound=null;this._outbound=null;this._pipe=null;this._presets=[];this.updatePresets=this.updatePresets.bind(this);this.onBroadcast=this.onBroadcast.bind(this);this.onPipeEncoded=this.onPipeEncoded.bind(this);this.onPipeDecoded=this.onPipeDecoded.bind(this);this._transport=transport;this._context=context;this._proxyRequest=proxyRequest;this._presets=preparePresets(__PRESETS__);this._pipe=this.createPipe(this._presets);var _getBounds=getBounds(transport);const Inbound=_getBounds.Inbound,Outbound=_getBounds.Outbound;this._inbound=new Inbound({context:context,pipe:this._pipe});this._outbound=new Outbound({inbound:this._inbound,pipe:this._pipe});this._outbound.updatePresets=this.updatePresets;this._inbound.updatePresets=this.updatePresets;this._inbound.setOutbound(this._outbound);this._inbound.on('close',()=>{this.destroy();this.emit('close')});this._pipe.broadcast('pipe',{type:_presets.CONNECTION_CREATED,payload:{transport:transport,host:context.remoteAddress,port:context.remotePort}});if(__IS_CLIENT__&&proxyRequest!==null){this._pipe.broadcast(null,{type:_presets.CONNECT_TO_REMOTE,payload:proxyRequest})}}onBroadcast(action){switch(action.type){case _presets.CHANGE_PRESET_SUITE:this.onChangePresetSuite(action);break;default:this._inbound&&this._inbound.onBroadcast(action);this._outbound&&this._outbound.onBroadcast(action);break;}}onChangePresetSuite(action){var _action$payload=action.payload;const type=_action$payload.type,suite=_action$payload.suite,data=_action$payload.data;_utils.logger.verbose(`[relay] changing presets suite to: ${JSON.stringify(suite)}`);this.updatePresets(preparePresets([...suite.presets,{'name':'auto-conf'}]));const transport=this._transport;const context=this._context;const proxyRequest=this._proxyRequest;this._pipe.broadcast('pipe',{type:_presets.CONNECTION_CREATED,payload:{transport:transport,host:context.remoteAddress,port:context.remotePort}});if(__IS_CLIENT__&&proxyRequest!==null){this._pipe.broadcast(null,{type:_presets.CONNECT_TO_REMOTE,payload:_extends({},proxyRequest,{keepAlive:true})})}this._pipe.feed(type,data)}onPipeEncoded(buffer){if(__IS_CLIENT__){this._outbound.write(buffer)}else{this._inbound.write(buffer)}}onPipeDecoded(buffer){if(__IS_CLIENT__){this._inbound.write(buffer)}else{this._outbound.write(buffer)}}updatePresets(value){this._presets=typeof value==='function'?value(this._presets):value;this._pipe.updateMiddlewares(this._presets)}createPipe(presets){const pipe=new _pipe.Pipe({presets,isUdp:this._transport==='udp'});pipe.on('broadcast',this.onBroadcast.bind(this));pipe.on(`post_${_middleware.PIPE_ENCODE}`,this.onPipeEncoded);pipe.on(`post_${_middleware.PIPE_DECODE}`,this.onPipeDecoded);return pipe}destroy(){this._pipe&&this._pipe.destroy();this._inbound&&this._inbound.destroy();this._outbound&&this._outbound.destroy();this._pipe=null;this._inbound=null;this._outbound=null;this._presets=null;this._context=null;this._proxyRequest=null}}exports.Relay=Relay;