'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Relay=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _events=require('events');var _events2=_interopRequireDefault(_events);var _pipe=require('./pipe');var _constants=require('../constants');var _utils=require('../utils');var _transports=require('../transports');var _defs=require('../presets/defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class Relay extends _events2.default{get id(){return this._id}set id(id){this._id=id;this._ctx.cid=id}constructor({config,transport,context,presets=[]}){super();this._id=null;this._ctx=null;this._transport=null;this._remoteInfo=null;this._proxyRequest=null;this._inbound=null;this._outbound=null;this._pipe=null;this._presets=[];this._destroyed=false;this._config=null;this.updatePresets=this.updatePresets.bind(this);this.onBroadcast=this.onBroadcast.bind(this);this.onEncoded=this.onEncoded.bind(this);this.onDecoded=this.onDecoded.bind(this);this._id=Relay.idcounter++;this._config=config;this._transport=transport;this._remoteInfo=context.remoteInfo;this._presets=this.preparePresets(presets);this._pipe=this.createPipe(this._presets);this._ctx=_extends({pipe:this._pipe,thisRelay:this},context);var _getBounds=this.getBounds(transport);const Inbound=_getBounds.Inbound,Outbound=_getBounds.Outbound;const props={config,context:this._ctx};const inbound=new Inbound(props);const outbound=new Outbound(props);this._inbound=inbound;this._outbound=outbound;this._outbound.setInbound(this._inbound);this._outbound.on('close',()=>this.onBoundClose(outbound,inbound));this._outbound.on('updatePresets',this.updatePresets);this._inbound.setOutbound(this._outbound);this._inbound.on('close',()=>this.onBoundClose(inbound,outbound));this._inbound.on('updatePresets',this.updatePresets)}init({proxyRequest}){this._proxyRequest=proxyRequest;this._pipe.broadcast('pipe',{type:_defs.CONNECTION_CREATED,payload:_extends({transport:this._transport},this._remoteInfo)});if(proxyRequest){this._pipe.broadcast(null,{type:_defs.CONNECT_TO_REMOTE,payload:proxyRequest})}}getBounds(transport){const mapping={'tcp':[_transports.TcpInbound,_transports.TcpOutbound],'udp':[_transports.UdpInbound,_transports.UdpOutbound],'tls':[_transports.TlsInbound,_transports.TlsOutbound],'ws':[_transports.WsInbound,_transports.WsOutbound],'mux':[_transports.MuxInbound,_transports.MuxOutbound]};let Inbound=null,Outbound=null;if(transport==='udp'){Inbound=_transports.UdpInbound;Outbound=_transports.UdpOutbound}else{var _ref=this._config.is_client?[_transports.TcpInbound,mapping[transport][1]]:[mapping[transport][0],_transports.TcpOutbound];var _ref2=_slicedToArray(_ref,2);Inbound=_ref2[0];Outbound=_ref2[1]}return{Inbound,Outbound}}onBoundClose(thisBound,anotherBound){if(anotherBound.__closed){if(this._pipe&&!this._pipe.destroyed){this._pipe.broadcast('pipe',{type:_defs.CONNECTION_CLOSED,payload:this._remoteInfo})}this.destroy();this.emit('close')}else{if(!this._pipe.destroyed){this._pipe.broadcast('pipe',{type:_defs.CONNECTION_WILL_CLOSE,payload:this._remoteInfo})}thisBound.__closed=true}}getOutbound(){return this._outbound}getInbound(){return this._inbound}onBroadcast(action){const type=action.type;if(type===_defs.CONNECT_TO_REMOTE){const remote=`${this._remoteInfo.host}:${this._remoteInfo.port}`;const target=`${action.payload.host}:${action.payload.port}`;if(this._config.mux&&this._config.is_client&&this._transport!=='udp'){_utils.logger.info(`[relay-${this.id}] [${remote}] request over mux-${this._ctx.muxRelay.id}: ${target}`);return}_utils.logger.info(`[relay] [${remote}] request: ${target}`)}if(type===_defs.CHANGE_PRESET_SUITE){this.onChangePresetSuite(action);return}this._inbound&&this._inbound.onBroadcast(action);this._outbound&&this._outbound.onBroadcast(action)}onChangePresetSuite(action){var _action$payload=action.payload;const type=_action$payload.type,suite=_action$payload.suite,data=_action$payload.data;_utils.logger.verbose(`[relay] changing presets suite to: ${JSON.stringify(suite)}`);this.updatePresets(this.preparePresets([...suite.presets,{'name':'auto-conf'}]));const transport=this._transport;const proxyRequest=this._proxyRequest;this._pipe.broadcast('pipe',{type:_defs.CONNECTION_CREATED,payload:_extends({transport},this._remoteInfo)});if(this._config.is_client){this._pipe.broadcast(null,{type:_defs.CONNECT_TO_REMOTE,payload:_extends({},proxyRequest,{keepAlive:true})})}this._pipe.feed(type,data)}onEncoded(buffer){if(this._config.is_client){this._outbound.write(buffer)}else{this._inbound.write(buffer)}}onDecoded(buffer){if(this._config.is_client){this._inbound.write(buffer)}else{this._outbound.write(buffer)}}encode(buffer,extraArgs){if(this._pipe){this._pipe.feed(_constants.PIPE_ENCODE,buffer,extraArgs)}}decode(buffer,extraArgs){if(this._pipe){this._pipe.feed(_constants.PIPE_DECODE,buffer,extraArgs)}}hasListener(name){return this.listenerCount(name)>0}isOutboundReady(){return this._outbound&&this._outbound.writable}preparePresets(presets){const last=presets[presets.length-1];if(!last||last.name!=='tracker'){presets=presets.concat([{'name':'tracker'}])}return presets}updatePresets(value){this._presets=typeof value==='function'?value(this._presets):value;this._pipe.updateMiddlewares(this._presets)}createPipe(presets){const pipe=new _pipe.Pipe({config:this._config,presets,isUdp:this._transport==='udp'});pipe.on('broadcast',this.onBroadcast.bind(this));pipe.on(`post_${_constants.PIPE_ENCODE}`,this.onEncoded);pipe.on(`post_${_constants.PIPE_DECODE}`,this.onDecoded);return pipe}destroy(){if(!this._destroyed){this._pipe&&this._pipe.destroy();this._inbound&&this._inbound.close();this._outbound&&this._outbound.close();this._ctx=null;this._pipe=null;this._inbound=null;this._outbound=null;this._presets=null;this._remoteInfo=null;this._proxyRequest=null;this._destroyed=true;this._config=null}}}exports.Relay=Relay;Relay.idcounter=0;