'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Config=exports.AVAILABLE_PROTOCOLS=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _dns=require('dns');var _dns2=_interopRequireDefault(_dns);var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _path=require('path');var _path2=_interopRequireDefault(_path);var _os=require('os');var _os2=_interopRequireDefault(_os);var _net=require('net');var _net2=_interopRequireDefault(_net);var _url=require('url');var _url2=_interopRequireDefault(_url);var _winston=require('winston');var _winston2=_interopRequireDefault(_winston);var _lodash=require('lodash.isplainobject');var _lodash2=_interopRequireDefault(_lodash);var _presets=require('../presets');var _utils=require('../utils');var _dnsCache=require('./dns-cache');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const AVAILABLE_PROTOCOLS=exports.AVAILABLE_PROTOCOLS=['tcp','socks','socks5','socks4','socks4a','http','https','ws','tls'];function loadFileSync(file){return _fs2.default.readFileSync(_path2.default.resolve(process.cwd(),file))}class Config{static init(json){this._validate(json);if(json.servers!==undefined){global.__SERVERS__=json.servers.filter(server=>server.enabled);global.__IS_CLIENT__=true;global.__IS_SERVER__=false}else{global.__IS_CLIENT__=false;global.__IS_SERVER__=true;this.initServer(json)}if(json.service!==undefined){var _url$parse=_url2.default.parse(json.service);const protocol=_url$parse.protocol,host=_url$parse.hostname,port=_url$parse.port;global.__LOCAL_PROTOCOL__=protocol.slice(0,-1);global.__LOCAL_HOST__=host;global.__LOCAL_PORT__=port}else{global.__LOCAL_PROTOCOL__=__IS_CLIENT__?'socks5':__TRANSPORT__;global.__LOCAL_HOST__=json.host;global.__LOCAL_PORT__=json.port}global.__TIMEOUT__=json.timeout!==undefined?json.timeout*1e3:600*1e3;global.__REDIRECT__=json.redirect!==''?json.redirect:null;global.__WORKERS__=json.workers!==undefined?json.workers:0;global.__DNS_EXPIRE__=json.dns_expire!==undefined?json.dns_expire*1e3:_dnsCache.DNS_DEFAULT_EXPIRE;if(json.dns!==undefined&&json.dns.length>0){global.__DNS__=json.dns;_dns2.default.setServers(json.dns)}const absolutePath=_path2.default.resolve(process.cwd(),json.log_path||'.');let isFile=false;if(_fs2.default.existsSync(absolutePath)){isFile=_fs2.default.statSync(absolutePath).isFile()}else if(_path2.default.extname(absolutePath)!==''){isFile=true}global.__LOG_PATH__=isFile?absolutePath:_path2.default.join(absolutePath,`bs-${__IS_CLIENT__?'client':'server'}.log`);global.__LOG_LEVEL__=json.log_level!==undefined?json.log_level:'info';global.__LOG_MAX_DAYS__=json.log_max_days!==undefined?json.log_max_days:0;_utils.logger.configure({level:__LOG_LEVEL__,transports:[new _winston2.default.transports.Console({colorize:true,prettyPrint:true}),new(require('winston-daily-rotate-file'))({filename:__LOG_PATH__,level:__LOG_LEVEL__,maxDays:__LOG_MAX_DAYS__})]})}static initServer(server){if(server.service!==undefined){var _url$parse2=_url2.default.parse(server.service);const protocol=_url$parse2.protocol,host=_url$parse2.hostname,port=_url$parse2.port;global.__TRANSPORT__=protocol.slice(0,-1);global.__SERVER_HOST__=host;global.__SERVER_PORT__=port}else{global.__TRANSPORT__=server.transport||'tcp';global.__SERVER_HOST__=server.host;global.__SERVER_PORT__=server.port}if(__TRANSPORT__==='tls'){_utils.logger.info(`[config] loading ${server.tls_cert}`);global.__TLS_CERT__=loadFileSync(server.tls_cert);if(__IS_SERVER__){_utils.logger.info(`[config] loading ${server.tls_key}`);global.__TLS_KEY__=loadFileSync(server.tls_key)}}global.__KEY__=server.key;global.__PRESETS__=server.presets}static _validate(json){if(!(0,_lodash2.default)(json)){throw Error('invalid configuration file')}if(json.service!==undefined){Config._validateService(json)}else{if(!(0,_utils.isValidHostname)(json.host)){throw Error('\'host\' is invalid')}if(!(0,_utils.isValidPort)(json.port)){throw Error('\'port\' is invalid')}}if(json.servers!==undefined){if(!Array.isArray(json.servers)){throw Error('\'servers\' must be provided as an array')}const servers=json.servers.filter(server=>server.enabled===true);if(servers.length<1){throw Error('\'servers\' must have at least one enabled item')}servers.forEach(this._validateServer)}else{this._validateServer(json)}if(json.timeout!==undefined){if(typeof json.timeout!=='number'){throw Error('\'timeout\' must be a number')}if(json.timeout<1){throw Error('\'timeout\' must be greater than 0')}if(json.timeout<60){console.warn(`==> [config] 'timeout' is too short, is ${json.timeout}s expected?`)}}if(json.redirect!==undefined&&json.redirect!==''){if(typeof json.redirect!=='string'){throw Error('\'redirect\' must be a string')}const parts=json.redirect.split(':');if(parts.length!==2){throw Error('\'redirect\' must be "<host or ip>:<port>"')}var _parts=_slicedToArray(parts,2);const host=_parts[0],port=_parts[1];if(!(0,_utils.isValidHostname)(host)&&!_net2.default.isIP(host)){throw Error('\'redirect\' host is invalid')}if(!(0,_utils.isValidPort)(+port)){throw Error('\'redirect\' port is invalid')}}if(json.log_path!==undefined){if(typeof json.log_path!=='string'){throw Error('\'log_path\' must be a string')}}if(json.log_level!==undefined){const levels=['error','warn','info','verbose','debug','silly'];if(!levels.includes(json.log_level)){throw Error(`'log_level' must be one of [${levels.toString()}]`)}}if(json.log_max_days!==undefined){if(typeof json.log_max_days!=='number'){throw Error('\'log_max_days\' must a number')}if(json.log_max_days<1){throw Error('\'log_max_days\' must be greater than 0')}}if(json.workers!==undefined){if(typeof json.workers!=='number'){throw Error('\'workers\' must be a number')}if(json.workers<0){throw Error('\'workers\' must be an integer')}if(json.workers>_os2.default.cpus().length){console.warn(`==> [config] 'workers' is greater than the number of cpus, is ${json.workers} workers expected?`)}}if(json.dns!==undefined){if(!Array.isArray(json.dns)){throw Error('\'dns\' must be an array')}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=json.dns[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const ip=_step.value;if(!_net2.default.isIP(ip)){throw Error(`"${ip}" is not an ip address`)}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}}if(json.dns_expire!==undefined){if(typeof json.dns_expire!=='number'){throw Error('\'dns_expire\' must be a number')}if(json.dns_expire<0){throw Error('\'dns_expire\' must be greater or equal to 0')}if(json.dns_expire>24*60*60){console.warn(`==> [config] 'dns_expire' is too long, is ${json.dns_expire}s expected?`)}}}static _validateServer(server){if(server.transport!==undefined){if(!['tcp','tls','ws'].includes(server.transport)){throw Error('\'server.transport\' must be "tcp", "tls" or "ws"')}if(server.transport==='tls'){if(typeof server.tls_cert!=='string'){throw Error('\'server.tls_key\' must be a string')}if(server.tls_cert===''){throw Error('\'server.tls_cert\' cannot be empty')}}}if(server.service!==undefined){Config._validateService(server)}else{if(!(0,_utils.isValidHostname)(server.host)){throw Error('\'server.host\' is invalid')}if(!(0,_utils.isValidPort)(server.port)){throw Error('\'server.port\' is invalid')}}if(typeof server.key!=='string'||server.key===''){throw Error('\'server.key\' must be a non-empty string')}if(!Array.isArray(server.presets)){throw Error('\'server.presets\' must be an array')}if(server.presets.length<1){throw Error('\'server.presets\' must contain at least one preset')}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=server.presets[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){const preset=_step2.value;const name=preset.name,params=preset.params;if(typeof name!=='string'){throw Error('\'server.presets[].name\' must be a string')}if(name===''){throw Error('\'server.presets[].name\' cannot be empty')}if(params!==undefined){if(!(0,_lodash2.default)(params)){throw Error('\'server.presets[].params\' must be an plain object')}}const PresetClass=(0,_presets.getPresetClassByName)(preset.name);PresetClass.checkParams(preset.params||{})}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return()}}finally{if(_didIteratorError2){throw _iteratorError2}}}}static _validateService(json){var _url$parse3=_url2.default.parse(json.service);const protocol=_url$parse3.protocol,host=_url$parse3.hostname,port=_url$parse3.port;if(typeof protocol!=='string'){throw Error('service protocol is invalid')}const _protocol=protocol.slice(0,-1);if(!AVAILABLE_PROTOCOLS.includes(_protocol)){throw Error(`service protocol must be: ${AVAILABLE_PROTOCOLS.join(', ')}`)}if(_protocol==='tls'){if(typeof json.tls_cert!=='string'||json.tls_cert===''){throw Error('\'tls_cert\' must be set')}if(json.tls_key!==undefined&&typeof json.tls_key!=='string'){throw Error('\'tls_key\' must be set')}}if(!(0,_utils.isValidHostname)(host)){throw Error('service host is invalid')}if(!(0,_utils.isValidPort)(+port)){throw Error('service port is invalid')}}}exports.Config=Config;