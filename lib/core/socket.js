'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Socket=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _net=require('net');var _net2=_interopRequireDefault(_net);var _winston=require('winston');var _winston2=_interopRequireDefault(_winston);var _clientProxy=require('./client-proxy');var _dnsCache=require('./dns-cache');var _balancer=require('./balancer');var _pipe=require('./pipe');var _profile=require('./profile');var _middleware=require('./middleware');var _utils=require('../utils');var _defs=require('../presets/defs');var _socks=require('../proxies/socks5');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const dnsCache=_dnsCache.DNSCache.create();const TRACK_CHAR_UPLOAD='u';const TRACK_CHAR_DOWNLOAD='d';const TRACK_MAX_SIZE=40;let lastTarget=null;class Socket{constructor({id,socket,onClose}){this._id=null;this._onClose=null;this._isHandshakeDone=false;this._bsocket=null;this._fsocket=null;this._pipe=null;this._isRedirect=false;this._proxy=null;this._tracks=[];this._timeout=0;this._timeout_timer=null;this.onError=this.onError.bind(this);this.onClose=this.onClose.bind(this);this.onForward=this.onForward.bind(this);this.onBackward=this.onBackward.bind(this);this._id=id;this._onClose=onClose;this._bsocket=socket;this._bsocket.on('error',this.onError);this._bsocket.on('close',this.onClose);this._bsocket.on('data',this.onForward);if(__IS_SERVER__){this.createPipe()}else{this._proxy=new _clientProxy.ClientProxy({onHandshakeDone:this.onHandshakeDone.bind(this)})}this._tracks.push(`${socket.remoteAddress}:${socket.remotePort}`);this.setupTimeout()}get id(){return this._id}get isPipable(){return!this._isRedirect&&this._bsocket!==null&&!this._bsocket.destroyed&&this._fsocket!==null&&!this._fsocket.destroyed}onForward(buffer){this._timeout=__TIMEOUT__;if(__IS_CLIENT__&&!this._proxy.isDone()){this._proxy.makeHandshake(this._bsocket,buffer);return}let _buffer=buffer;if(__IS_CLIENT__&&this._socksUdpReady){const request=_socks.UdpRequestMessage.parse(buffer);if(request!==null){_buffer=request.DATA}else{_winston2.default.warn(`[${this._id}] -x-> dropped unidentified packet ${buffer.length} bytes`);return}}if(this.isPipable||__IS_SERVER__&&!this._isHandshakeDone){try{this._pipe.feed(__IS_CLIENT__?_middleware.MIDDLEWARE_DIRECTION_UPWARD:_middleware.MIDDLEWARE_DIRECTION_DOWNWARD,_buffer);_profile.Profile.totalIn+=buffer.length;this._tracks.push(TRACK_CHAR_DOWNLOAD);this._tracks.push(buffer.length)}catch(err){_winston2.default.error(`[${this._id}]`,err)}}if(__IS_SERVER__&&this._isRedirect){this._fsocket.write(buffer)}}onBackward(buffer){this._timeout=__TIMEOUT__;if(this.isPipable){try{this._pipe.feed(__IS_CLIENT__?_middleware.MIDDLEWARE_DIRECTION_DOWNWARD:_middleware.MIDDLEWARE_DIRECTION_UPWARD,buffer);_profile.Profile.totalIn+=buffer.length;this._tracks.push(TRACK_CHAR_DOWNLOAD);this._tracks.push(buffer.length)}catch(err){_winston2.default.error(`[${this._id}]`,err)}}if(__IS_SERVER__&&this._isRedirect){this._bsocket.write(buffer)}}onError(err){_winston2.default.verbose(`[${this._id}] ${err.code} - ${err.message}`);_profile.Profile.errors+=1}onClose(){const sockets=[this._bsocket,this._fsocket];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=sockets[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const socket=_step.value;if(socket!==null&&!socket.destroyed){socket.destroy();this._onClose(this);_winston2.default.info(`[socket] [${this._id}] closed`);this.dumpTrack()}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}this._bsocket=null;this._fsocket=null;clearInterval(this._timeout_timer)}send(buffer,flag){if(this.isPipable){if(flag){this._fsocket.write(buffer)}else{this._bsocket.write(buffer)}_profile.Profile.totalOut+=buffer.length;this._tracks.push(TRACK_CHAR_UPLOAD);this._tracks.push(buffer.length)}this._timeout=__TIMEOUT__}connect({host,port},callback){var _this=this;return _asyncToGenerator(function*(){if(host&&port){_winston2.default.info(`[socket] [${_this._id}] connecting to: ${host}:${port}`);_this._tracks.push(`${host}:${port}`);try{const ip=yield dnsCache.get(host);_this._fsocket=_net2.default.connect({host:ip,port},callback);_this._fsocket.on('error',_this.onError);_this._fsocket.on('close',_this.onClose);_this._fsocket.on('data',_this.onBackward)}catch(err){_winston2.default.error(`[socket] [${_this._id}] connect to ${host}:${port} failed due to: ${err.message}`)}}else{_winston2.default.warn(`unexpected host=${host} port=${port}`);_this.onClose()}})()}setupTimeout(){this._timeout=__TIMEOUT__;this._timeout_timer=setInterval(()=>{if(--this._timeout<1){_winston2.default.warn(`[socket] [${this._id}] timeout: no I/O on the connection for ${__TIMEOUT__}s`);this.onClose()}},1e3)}createPipe(addr){const pipeProps={onNotified:action=>{if(__IS_SERVER__&&action.type===_defs.SOCKET_CONNECT_TO_DST){var _action$payload=_slicedToArray(action.payload,2);const addr=_action$payload[0],callback=_action$payload[1];return this.connect(addr,()=>{this._isHandshakeDone=true;callback()})}if(action.type===_defs.PROCESSING_FAILED){return this.onPresetFailed(action)}}};this._pipe=new _pipe.Pipe(pipeProps);this._pipe.setMiddlewares(_middleware.MIDDLEWARE_DIRECTION_UPWARD,__PRESETS__.map((preset,i)=>(0,_middleware.createMiddleware)(preset.name,_extends({},preset.params,i===0?addr:{}))));this._pipe.on(`next_${_middleware.MIDDLEWARE_DIRECTION_UPWARD}`,buf=>this.send(buf,__IS_CLIENT__));this._pipe.on(`next_${_middleware.MIDDLEWARE_DIRECTION_DOWNWARD}`,buf=>this.send(buf,__IS_SERVER__))}onPresetFailed(action){var _action$payload2=action.payload;const message=_action$payload2.message,orgData=_action$payload2.orgData;if(__IS_SERVER__&&__REDIRECT__!==''&&this._fsocket===null){var _REDIRECT__$split=__REDIRECT__.split(':'),_REDIRECT__$split2=_slicedToArray(_REDIRECT__$split,2);const host=_REDIRECT__$split2[0],port=_REDIRECT__$split2[1];_winston2.default.error(`[socket] [${this._id}] connection will be redirected to ${host}:${port} due to: ${message}`);this.connect({host,port},()=>{this._isRedirect=true;this._fsocket.write(orgData)})}else{const timeout=_utils.Utils.getRandomInt(10,40);_winston2.default.error(`[socket] [${this._id}] connection will be closed in ${timeout}s due to: ${message}`);setTimeout(()=>this.onClose(),timeout*1e3)}_profile.Profile.fatals+=1}dumpTrack(){const strs=[];const perSize=Math.floor(TRACK_MAX_SIZE/2);const tracks=this._tracks.length>TRACK_MAX_SIZE?this._tracks.slice(0,perSize).concat([' ... ']).concat(this._tracks.slice(-perSize)):this._tracks;let ud='';var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=tracks[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){const el=_step2.value;if(el===TRACK_CHAR_UPLOAD||el===TRACK_CHAR_DOWNLOAD){if(ud===el){continue}ud=el}strs.push(el)}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return()}}finally{if(_didIteratorError2){throw _iteratorError2}}}const samples=this._tracks.filter(Number.isInteger).length;_winston2.default.info(`[socket] [${this._id}] summary(${samples} sampled): ${strs.join(' ')}`)}onHandshakeDone(addr,callback){const ep=_balancer.Balancer.getFastest();if(lastTarget===null||ep.host!==lastTarget.host||ep.port!==lastTarget.port){_winston2.default.info(`[balancer] use: ${ep.host}:${ep.port}`)}lastTarget=ep;return this.connect(ep,()=>{this.createPipe(addr);this._isHandshakeDone=true;callback(this.onForward)})}}exports.Socket=Socket;