'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Socket=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _net=require('net');var _net2=_interopRequireDefault(_net);var _winston=require('winston');var _winston2=_interopRequireDefault(_winston);var _lodash=require('lodash.isequal');var _lodash2=_interopRequireDefault(_lodash);var _blinksocksUtils=require('blinksocks-utils');var _config=require('./config');var _clientProxy=require('./client-proxy');var _dnsCache=require('./dns-cache');var _balancer=require('./balancer');var _pipe=require('./pipe');var _profile=require('./profile');var _middleware=require('./middleware');var _defs=require('../presets/defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const dnsCache=_dnsCache.DNSCache.create();const TRACK_CHAR_UPLOAD='\u2191';const TRACK_CHAR_DOWNLOAD='\u2193';const TRACK_MAX_SIZE=40;const MAX_BUFFERED_SIZE=1024*1024;let lastServer=null;class Socket{constructor({id,socket,onClose}){this._id=null;this._onClose=null;this._isHandshakeDone=false;this._remoteAddress='';this._remotePort='';this._bsocket=null;this._fsocket=null;this._pipe=null;this._isRedirect=false;this._proxy=null;this._tracks=[];this.onForward=this.onForward.bind(this);this.onBackward=this.onBackward.bind(this);this.onError=this.onError.bind(this);this.onBackwardSocketDrain=this.onBackwardSocketDrain.bind(this);this.onBackwardSocketTimeout=this.onBackwardSocketTimeout.bind(this);this.onBackwardSocketClose=this.onBackwardSocketClose.bind(this);this.onForwardSocketDrain=this.onForwardSocketDrain.bind(this);this.onForwardSocketTimeout=this.onForwardSocketTimeout.bind(this);this.onForwardSocketClose=this.onForwardSocketClose.bind(this);this._id=id;this._onClose=onClose;this._remoteAddress=socket.remoteAddress;this._remotePort=socket.remotePort;this._bsocket=socket;this._bsocket.on('error',this.onError);this._bsocket.on('close',this.onBackwardSocketClose);this._bsocket.on('timeout',this.onBackwardSocketTimeout.bind(this,{host:this._remoteAddress,port:this._remotePort}));this._bsocket.on('data',this.onForward);this._bsocket.on('drain',this.onBackwardSocketDrain);this._bsocket.setTimeout(__TIMEOUT__*1e3);if(__IS_SERVER__){this._tracks.push(`${this._remoteAddress}:${this._remotePort}`);this.createPipe()}else{this._proxy=new _clientProxy.ClientProxy({onHandshakeDone:this.onHandshakeDone.bind(this)})}}get id(){return this._id}get remote(){return`${this._remoteAddress}:${this._remotePort}`}get fsocketWritable(){return this._fsocket!==null&&!this._fsocket.destroyed&&this._fsocket.writable}get bsocketWritable(){return this._bsocket!==null&&!this._bsocket.destroyed&&this._bsocket.writable}onForward(buffer){if(__IS_CLIENT__){if(!this._proxy.isDone()){this._proxy.makeHandshake(this._bsocket,buffer);return}this.clientOut(buffer)}else{if(this._isRedirect){this.fsocketWritable&&this._fsocket.write(buffer);return}this.serverIn(buffer)}_profile.Profile.totalIn+=buffer.length;if(this._fsocket.bufferSize>=MAX_BUFFERED_SIZE){this._bsocket.pause()}}onBackward(buffer){if(__IS_CLIENT__){this.clientIn(buffer)}else{if(this._isRedirect){this.bsocketWritable&&this._bsocket.write(buffer);return}this.serverOut(buffer)}if(this._bsocket.bufferSize>=MAX_BUFFERED_SIZE){this._fsocket.pause()}}onError(err){_winston2.default.warn(`[socket] [${this.remote}] ${err.code} - ${err.message}`);_profile.Profile.errors+=1}onForwardSocketDrain(){if(this._bsocket!==null&&!this._bsocket.destroyed){this._bsocket.resume()}}onForwardSocketTimeout({host,port}){_winston2.default.warn(`[socket] [${host}:${port}] timeout: no I/O on the connection for ${__TIMEOUT__}s`);this.onForwardSocketClose()}onForwardSocketClose(){if(this._fsocket!==null&&!this._fsocket.destroyed){this._fsocket.destroy()}if(__IS_CLIENT__&&this._tracks.length>0){this.dumpTrack()}this._fsocket=null}onBackwardSocketDrain(){if(this._fsocket!==null&&!this._fsocket.destroyed){this._fsocket.resume()}}onBackwardSocketTimeout({host,port}){_winston2.default.warn(`[socket] [${host}:${port}] timeout: no I/O on the connection for ${__TIMEOUT__}s`);this.onBackwardSocketClose()}onBackwardSocketClose(){if(this._bsocket!==null&&!this._bsocket.destroyed){this._bsocket.destroy()}this.onForwardSocketClose();if(__IS_SERVER__&&this._tracks.length>0){this.dumpTrack()}this._bsocket=null;this._onClose(this)}onHandshakeDone(addr,callback){const server=_balancer.Balancer.getFastest();if(lastServer===null||!(0,_lodash2.default)(server,lastServer)){_config.Config.initServer(server);lastServer=server;_winston2.default.info(`[balancer] use: ${__SERVER_HOST__}:${__SERVER_PORT__}`)}var _ref=[addr.host.toString(),addr.port.readUInt16BE(0)];const dstHost=_ref[0],dstPort=_ref[1];return this.connect({host:__SERVER_HOST__,port:__SERVER_PORT__,dstHost,dstPort},()=>{this.createPipe(addr);this._tracks.push(`${dstHost}:${dstPort}`);this._isHandshakeDone=true;callback(this.onForward)})}clientOut(buffer){if(this.fsocketWritable){try{this._pipe.feed(_middleware.MIDDLEWARE_DIRECTION_UPWARD,buffer)}catch(err){_winston2.default.error(`[socket] [${this.remote}]`,err)}}}serverIn(buffer){if(this.fsocketWritable||!this._isHandshakeDone){try{this._pipe.feed(_middleware.MIDDLEWARE_DIRECTION_DOWNWARD,buffer);this._tracks.push(TRACK_CHAR_DOWNLOAD);this._tracks.push(buffer.length)}catch(err){_winston2.default.error(`[socket] [${this.remote}]`,err)}}}serverOut(buffer){if(this.bsocketWritable){try{this._pipe.feed(_middleware.MIDDLEWARE_DIRECTION_UPWARD,buffer)}catch(err){_winston2.default.error(`[socket] [${this.remote}]`,err)}}}clientIn(buffer){if(this.bsocketWritable){try{this._pipe.feed(_middleware.MIDDLEWARE_DIRECTION_DOWNWARD,buffer);this._tracks.push(TRACK_CHAR_DOWNLOAD);this._tracks.push(buffer.length)}catch(err){_winston2.default.error(`[socket] [${this.remote}]`,err)}}}send(direction,buffer){if(direction===_middleware.MIDDLEWARE_DIRECTION_UPWARD){if(__IS_CLIENT__){this.clientForward(buffer)}else{this.serverBackward(buffer)}}else{if(__IS_CLIENT__){this.clientBackward(buffer)}else{this.serverForward(buffer)}}_profile.Profile.totalOut+=buffer.length}clientForward(buffer){if(this.fsocketWritable){this._fsocket.write(buffer);this._tracks.push(TRACK_CHAR_UPLOAD);this._tracks.push(buffer.length)}}serverForward(buffer){if(this.fsocketWritable){this._fsocket.write(buffer)}}serverBackward(buffer){if(this.bsocketWritable){this._bsocket.write(buffer);this._tracks.push(TRACK_CHAR_UPLOAD);this._tracks.push(buffer.length)}}clientBackward(buffer){if(this.bsocketWritable){this._bsocket.write(buffer)}}connect({host,port,dstHost,dstPort},callback){var _this=this;return _asyncToGenerator(function*(){if(host&&port){if(__IS_CLIENT__){_winston2.default.info(`[socket] [${_this.remote}] request: ${dstHost}:${dstPort}, connecting to: ${host}:${port}`)}else{_winston2.default.info(`[socket] [${_this.remote}] connecting to: ${host}:${port}`)}_this._tracks.push(`${host}:${port}`);try{const ip=yield dnsCache.get(host);_this._fsocket=_net2.default.connect({host:ip,port},callback);_this._fsocket.on('error',_this.onError);_this._fsocket.on('close',_this.onForwardSocketClose);_this._fsocket.on('timeout',_this.onForwardSocketTimeout.bind(_this,{host,port}));_this._fsocket.on('data',_this.onBackward);_this._fsocket.on('drain',_this.onForwardSocketDrain);_this._fsocket.setTimeout(__TIMEOUT__*1e3)}catch(err){_winston2.default.error(`[socket] [${_this.remote}] connect to ${host}:${port} failed due to: ${err.message}`)}}else{_winston2.default.warn(`unexpected host=${host} port=${port}`);_this.onBackwardSocketClose()}})()}createPipe(addr){const presets=__PRESETS__.map((preset,i)=>(0,_middleware.createMiddleware)(preset.name,_extends({},preset.params,i===0?addr:{})));this._pipe=new _pipe.Pipe({onNotified:this.onPipeNotified.bind(this)});this._pipe.setMiddlewares(_middleware.MIDDLEWARE_DIRECTION_UPWARD,presets);this._pipe.on(`next_${_middleware.MIDDLEWARE_DIRECTION_UPWARD}`,buf=>this.send(_middleware.MIDDLEWARE_DIRECTION_UPWARD,buf));this._pipe.on(`next_${_middleware.MIDDLEWARE_DIRECTION_DOWNWARD}`,buf=>this.send(_middleware.MIDDLEWARE_DIRECTION_DOWNWARD,buf))}onPipeNotified(action){if(__IS_SERVER__&&action.type===_defs.SOCKET_CONNECT_TO_DST){var _action$payload=action.payload;const targetAddress=_action$payload.targetAddress,onConnected=_action$payload.onConnected;return this.connect(targetAddress,()=>{this._isHandshakeDone=true;onConnected()})}if(action.type===_defs.PROCESSING_FAILED){return this.onPresetFailed(action)}}onPresetFailed(action){var _action$payload2=action.payload;const message=_action$payload2.message,orgData=_action$payload2.orgData;if(__IS_SERVER__&&__REDIRECT__!==''&&this._fsocket===null){var _REDIRECT__$split=__REDIRECT__.split(':'),_REDIRECT__$split2=_slicedToArray(_REDIRECT__$split,2);const host=_REDIRECT__$split2[0],port=_REDIRECT__$split2[1];_winston2.default.error(`[socket] [${this.remote}] connection is redirected to ${host}:${port} due to: ${message}`);this.connect({host,port},()=>{this._isRedirect=true;this.fsocketWritable&&this._fsocket.write(orgData)})}else{const timeout=(0,_blinksocksUtils.getRandomInt)(10,40);_winston2.default.error(`[socket] [${this.remote}] connection will be closed in ${timeout}s due to: ${message}`);setTimeout(()=>{this.onForwardSocketClose();this.onBackwardSocketClose()},timeout*1e3)}_profile.Profile.fatals+=1}dumpTrack(){let strs=[];let dp=0,db=0;let up=0,ub=0;let ud='';var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this._tracks[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const el=_step.value;if(el===TRACK_CHAR_UPLOAD||el===TRACK_CHAR_DOWNLOAD){if(ud===el){continue}ud=el}if(Number.isInteger(el)){if(ud===TRACK_CHAR_DOWNLOAD){dp+=1;db+=el}if(ud===TRACK_CHAR_UPLOAD){up+=1;ub+=el}}strs.push(el)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}const perSize=Math.floor(TRACK_MAX_SIZE/2);if(strs.length>TRACK_MAX_SIZE){strs=strs.slice(0,perSize).concat([' ... ']).concat(strs.slice(-perSize))}const summary=__IS_CLIENT__?`out/in = ${up}/${dp}, ${ub}b/${db}b`:`in/out = ${dp}/${up}, ${db}b/${ub}b`;_winston2.default.info(`[socket] [${this.remote}] closed with summary(${summary}) abstract(${strs.join(' ')})`);this._tracks=[]}destroy(){this.onForwardSocketClose();this.onBackwardSocketClose()}}exports.Socket=Socket;