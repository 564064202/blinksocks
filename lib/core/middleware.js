'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Middleware=exports.MIDDLEWARE_DIRECTION_DOWNWARD=exports.MIDDLEWARE_DIRECTION_UPWARD=undefined;exports.createMiddleware=createMiddleware;exports.cleanup=cleanup;var _events=require('events');var _events2=_interopRequireDefault(_events);var _presets=require('../presets');var _utils=require('../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const instanceCache={};const MIDDLEWARE_DIRECTION_UPWARD=exports.MIDDLEWARE_DIRECTION_UPWARD=1;const MIDDLEWARE_DIRECTION_DOWNWARD=exports.MIDDLEWARE_DIRECTION_DOWNWARD=-1;class Middleware extends _events2.default{constructor(impl){super();this._impl=null;this._impl=impl}get name(){return(0,_utils.kebabCase)(this._impl.constructor.name).replace(/(.*)-preset/i,'$1')}hasListener(event){return this.listenerCount(event)>0}onNotified(action){return this._impl.onNotified(action)}onDestroy(force=false){if(!force&&this._impl instanceof _presets.IPresetStatic){return}this._impl.onDestroy();this.removeAllListeners()}write(direction,{buffer,direct}){const type=direction===MIDDLEWARE_DIRECTION_UPWARD?'Out':'In';const broadcast=action=>void this.emit('broadcast',action);const fail=message=>void this.emit('fail',this.name,message);const next=(processed,isReverse=false)=>{const hasListener=this.emit(`next_${isReverse?-direction:direction}`,processed);if(!hasListener){direct(processed,isReverse)}};const nextLifeCycleHook=(buf)=>{const args={buffer:buf,next,broadcast,direct,fail};const ret=__IS_CLIENT__?this._impl[`client${type}`](args):this._impl[`server${type}`](args);if(ret instanceof Buffer){next(ret)}};const args={buffer,next:nextLifeCycleHook,broadcast,direct,fail};const ret=this._impl[`before${type}`](args);if(ret instanceof Buffer){nextLifeCycleHook(ret)}}}exports.Middleware=Middleware;function createMiddleware(name,params={}){try{const ImplClass=(0,_presets.getPresetClassByName)(name);let impl=null;if(ImplClass.__proto__.name===_presets.IPresetStatic.name){const _impl=instanceCache[ImplClass.name];if(_impl){impl=_impl}else{impl=instanceCache[ImplClass.name]=new ImplClass(params)}}else{impl=new ImplClass(params)}return new Middleware(impl)}catch(err){console.error(err.message);process.exit(-1)}return null}function cleanup(){const instances=Object.values(instanceCache);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=instances[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const ins=_step.value;ins.onDestroy(true)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}}