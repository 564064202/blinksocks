'use strict';var _Address=require('../Address');var _protocols=require('../../protocols');describe('Address#constructor',function(){it('should throw when ATYP is not v4, v6 or domain',function(){expect(function(){return new _Address.Address({ATYP:null})}).toThrow()});it('should throw when DSTADDR is not Array or Buffer',function(){expect(function(){return new _Address.Address({DSTADDR:null})}).toThrow()});it('should throw when v4 DSTADDR.length is not 4',function(){expect(function(){return new _Address.Address({ATYP:_protocols.ATYP_V4,DSTADDR:[]})}).toThrow()});it('should throw when v6 DSTADDR.length is not 16',function(){expect(function(){return new _Address.Address({ATYP:_protocols.ATYP_V6,DSTADDR:[]})}).toThrow()});it('should throw when ATYP is not v4, v6 or domain',function(){expect(function(){return new _Address.Address({ATYP:null})}).toThrow()});it('should throw when DSTPORT is not Array or Buffer',function(){expect(function(){return new _Address.Address({DSTPORT:null})}).toThrow()});it('should throw when DSTADDR.length is not 2',function(){expect(function(){return new _Address.Address({DSTPORT:[1,2,3]})}).toThrow()})});describe('Address#getEndPoint',function(){it('should throw when ATYP is invalid',function(){expect(function(){var conn=new _Address.Address;conn.ATYP=null;conn.getEndPoint()}).toThrow()})});describe('Address#toString',function(){it('should return ipv4 address',function(){var conn=new _Address.Address;expect(conn.toString()).toBe('0.0.0.0:0')});it('should return ipv6 address',function(){var conn=new _Address.Address({ATYP:_protocols.ATYP_V6,DSTADDR:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]});expect(conn.toString()).toBe('0102:0304:0506:0708:090a:0b0c:0d0e:0f10:0')});it('should return domain address',function(){var conn=new _Address.Address({ATYP:_protocols.ATYP_DOMAIN,DSTADDR:Buffer.from([97,98,99,46,99,111,109]),DSTPORT:[0,80]});expect(conn.toString()).toBe('abc.com:80')})});