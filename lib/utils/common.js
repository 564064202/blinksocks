'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.BYTE_ORDER_LE=exports.BYTE_ORDER_BE=undefined;exports.numberToBuffer=numberToBuffer;exports.getRandomInt=getRandomInt;exports.getRandomChunks=getRandomChunks;exports.getChunks=getChunks;exports.generateMutexId=generateMutexId;var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const BYTE_ORDER_BE=exports.BYTE_ORDER_BE=0;const BYTE_ORDER_LE=exports.BYTE_ORDER_LE=1;function numberToBuffer(num,len=2,byteOrder=BYTE_ORDER_BE){if(len<1){throw Error('len must be greater than 0')}const isOutOfRange=num>parseInt(`0x${'ff'.repeat(len)}`);if(isOutOfRange){throw Error(`Number ${num} is too big to put into a ${len} byte(s) size buffer`)}const buf=Buffer.alloc(len);if(byteOrder===BYTE_ORDER_BE){buf.writeUIntBE(num,0,len)}else{buf.writeUIntLE(num,0,len)}return buf}function getRandomInt(min,max){min=Math.ceil(min);max=Math.ceil(max);return Math.floor(_crypto2.default.randomBytes(1)[0]/255*(max-min))+min}function getRandomChunks(buffer,min,max){const totalLen=buffer.length;const bufs=[];let ptr=0;while(ptr<totalLen-1){const offset=getRandomInt(min,max);bufs.push(buffer.slice(ptr,ptr+offset));ptr+=offset}if(ptr<totalLen){bufs.push(buffer.slice(ptr))}return bufs}function getChunks(buffer,maxSize){const totalLen=buffer.length;const bufs=[];let ptr=0;while(ptr<totalLen-1){bufs.push(buffer.slice(ptr,ptr+maxSize));ptr+=maxSize}if(ptr<totalLen){bufs.push(buffer.slice(ptr))}return bufs}function generateMutexId(ids=[],max=255){const seqArr=Array.from(new Array(max).keys());for(let i=0;i<ids.length;++i){seqArr.splice(ids[i]-i,1)}if(seqArr.length>0){return seqArr[_crypto2.default.randomBytes(1)[0]%seqArr.length]}else{return-1}}