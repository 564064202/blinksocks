'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.checkPresetClass=checkPresetClass;const CONNECTION_CREATED=exports.CONNECTION_CREATED='@action:connection_created';const CONNECTION_CLOSED=exports.CONNECTION_CLOSED='@action:connection_closed';const CONNECTION_WILL_CLOSE=exports.CONNECTION_WILL_CLOSE='@action:connection_will_close';const CONNECT_TO_REMOTE=exports.CONNECT_TO_REMOTE='@action:connect_to_remote';const CONNECTED_TO_REMOTE=exports.CONNECTED_TO_REMOTE='@action:connected_to_remote';const PRESET_FAILED=exports.PRESET_FAILED='@action:preset_failed';const CHANGE_PRESET_SUITE=exports.CHANGE_PRESET_SUITE='@action:change_preset_suite';const PRESET_CLOSE_CONNECTION=exports.PRESET_CLOSE_CONNECTION='@action:preset_close_connection';const PRESET_PAUSE_RECV=exports.PRESET_PAUSE_RECV='@action:preset_pause_recv';const PRESET_PAUSE_SEND=exports.PRESET_PAUSE_SEND='@action:preset_pause_send';const PRESET_RESUME_RECV=exports.PRESET_RESUME_RECV='@action:preset_resume_recv';const PRESET_RESUME_SEND=exports.PRESET_RESUME_SEND='@action:preset_resume_send';const MUX_NEW_CONN=exports.MUX_NEW_CONN='@action:mux_new_conn';const MUX_DATA_FRAME=exports.MUX_DATA_FRAME='@action:mux_data_frame';const MUX_CLOSE_CONN=exports.MUX_CLOSE_CONN='@action:mux_close_conn';class IPreset{static onCheckParams(params){}static onCache(params,store){}constructor({config,params}={}){this._config=null;if(config){this._config=config}}onInit(params){}onNotified(action){return false}onDestroy(){}beforeOut({buffer}){return buffer}beforeIn({buffer}){return buffer}clientOut({buffer}){return buffer}serverIn({buffer}){return buffer}serverOut({buffer}){return buffer}clientIn({buffer}){return buffer}beforeOutUdp({buffer}){return buffer}beforeInUdp({buffer}){return buffer}clientOutUdp({buffer}){return buffer}serverInUdp({buffer}){return buffer}serverOutUdp({buffer}){return buffer}clientInUdp({buffer}){return buffer}next(direction,buffer){}broadcast(action){}fail(message){}readProperty(presetName,propertyName){}getStore(){}}exports.IPreset=IPreset;class IPresetAddressing extends IPreset{}exports.IPresetAddressing=IPresetAddressing;function checkPresetClass(clazz){if(typeof clazz!=='function'){return false}const requiredMethods=['onNotified','onDestroy','onInit','beforeOut','beforeIn','clientOut','serverIn','serverOut','clientIn','beforeOutUdp','beforeInUdp','clientOutUdp','serverInUdp','serverOutUdp','clientInUdp'];if(requiredMethods.some(method=>typeof clazz.prototype[method]!=='function')){return false}const requiredStaticMethods=['onCheckParams','onCache'];if(requiredStaticMethods.some(method=>typeof clazz[method]!=='function')){return false}return true}