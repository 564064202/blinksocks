'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _path=require('path');var _path2=_interopRequireDefault(_path);var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);var _defs=require('./defs');var _utils=require('../utils');var _middleware=require('../core/middleware');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const MAX_TIME_DIFF=30;class AutoConfPreset extends _defs.IPreset{constructor(...args){var _temp;return _temp=super(...args),this._isSuiteChanged=false,this._isHeaderSent=false,this._header=null,_temp}static checkParams({suites}){if(typeof suites!=='string'||suites.length<1){throw Error('\'suites\' is invalid')}}static onInit({suites}){const rawText=_fs2.default.readFileSync(_path2.default.resolve(process.cwd(),suites),{encoding:'utf-8'});AutoConfPreset.suites=JSON.parse(rawText);if(AutoConfPreset.suites.length<1){throw Error(`you must provide at least one suite in ${suites}`)}}onDestroy(){this._header=null}clientOut({buffer,broadcast}){if(!this._isSuiteChanged){this._isSuiteChanged=true;const sid=_crypto2.default.randomBytes(2);const utc=(0,_utils.numberToBuffer)((0,_utils.getCurrentTimestampInt)(),4,_utils.BYTE_ORDER_LE);const hmac_key=(0,_utils.EVP_BytesToKey)(Buffer.from(__KEY__).toString('base64')+(0,_utils.hash)('md5',sid).toString('base64'),16,16);const request_hmac=(0,_utils.hmac)('md5',hmac_key,Buffer.concat([sid,utc]));const suites=AutoConfPreset.suites;const suite=suites[sid.readUInt16LE(0)%suites.length];_utils.logger.verbose(`[auto-conf] changing presets suite to: ${JSON.stringify(suite)}`);this._header=Buffer.concat([sid,utc,request_hmac]);return broadcast({type:_defs.CHANGE_PRESET_SUITE,payload:{type:_middleware.PIPE_ENCODE,presets:suite.presets,data:buffer}})}if(!this._isHeaderSent){this._isHeaderSent=true;return Buffer.concat([this._header,buffer])}else{return buffer}}serverIn({buffer,broadcast,fail}){if(!this._isSuiteChanged){if(buffer.length<22){return fail(`client request is too short, dump=${(0,_utils.dumpHex)(buffer)}`)}const sid=buffer.slice(0,2);const request_hmac=buffer.slice(6,22);const hmac_key=(0,_utils.EVP_BytesToKey)(Buffer.from(__KEY__).toString('base64')+(0,_utils.hash)('md5',sid).toString('base64'),16,16);const hmac_calc=(0,_utils.hmac)('md5',hmac_key,buffer.slice(0,6));if(!hmac_calc.equals(request_hmac)){return fail(`unexpected hmac of client request, dump=${(0,_utils.dumpHex)(buffer)}`)}const utc=buffer.readUInt32LE(2);const time_diff=Math.abs(utc-(0,_utils.getCurrentTimestampInt)());if(time_diff>MAX_TIME_DIFF){return fail(`timestamp diff is over ${MAX_TIME_DIFF}s, dump=${(0,_utils.dumpHex)(buffer)}`)}const suites=AutoConfPreset.suites;const suite=suites[sid.readUInt16LE(0)%suites.length];_utils.logger.verbose(`[auto-conf] changing presets suite to: ${JSON.stringify(suite)}`);this._isSuiteChanged=true;return broadcast({type:_defs.CHANGE_PRESET_SUITE,payload:{type:_middleware.PIPE_DECODE,presets:suite.presets,data:buffer.slice(22)}})}return buffer}clientOutUdp({buffer,broadcast}){if(!this._isSuiteChanged){this._isSuiteChanged=true;const sid=_crypto2.default.randomBytes(2);const utc=(0,_utils.numberToBuffer)((0,_utils.getCurrentTimestampInt)(),4,_utils.BYTE_ORDER_LE);const hmac_key=(0,_utils.EVP_BytesToKey)(Buffer.from(__KEY__).toString('base64')+(0,_utils.hash)('md5',sid).toString('base64'),16,16);const request_hmac=(0,_utils.hmac)('md5',hmac_key,Buffer.concat([sid,utc]));const suites=AutoConfPreset.suites;const suite=suites[sid.readUInt16LE(0)%suites.length];_utils.logger.verbose(`[auto-conf] changing presets suite to: ${JSON.stringify(suite)}`);this._header=Buffer.concat([sid,utc,request_hmac]);return broadcast({type:_defs.CHANGE_PRESET_SUITE,payload:{type:_middleware.PIPE_ENCODE,presets:suite.presets,data:buffer}})}else{this._isSuiteChanged=false;return Buffer.concat([this._header,buffer])}}serverInUdp({buffer,broadcast,fail}){if(!this._isSuiteChanged){if(buffer.length<22){return fail(`client request is too short, dump=${(0,_utils.dumpHex)(buffer)}`)}const sid=buffer.slice(0,2);const request_hmac=buffer.slice(6,22);const hmac_key=(0,_utils.EVP_BytesToKey)(Buffer.from(__KEY__).toString('base64')+(0,_utils.hash)('md5',sid).toString('base64'),16,16);const hmac_calc=(0,_utils.hmac)('md5',hmac_key,buffer.slice(0,6));if(!hmac_calc.equals(request_hmac)){return fail(`unexpected hmac of client request, dump=${(0,_utils.dumpHex)(buffer)}`)}const utc=buffer.readUInt32LE(2);const time_diff=Math.abs(utc-(0,_utils.getCurrentTimestampInt)());if(time_diff>MAX_TIME_DIFF){return fail(`timestamp diff is over ${MAX_TIME_DIFF}s, dump=${(0,_utils.dumpHex)(buffer)}`)}const suites=AutoConfPreset.suites;const suite=suites[sid.readUInt16LE(0)%suites.length];_utils.logger.verbose(`[auto-conf] changing presets suite to: ${JSON.stringify(suite)}`);this._isSuiteChanged=true;return broadcast({type:_defs.CHANGE_PRESET_SUITE,payload:{type:_middleware.PIPE_DECODE,presets:suite.presets,data:buffer.slice(22)}})}else{this._isSuiteChanged=false;return buffer}}}exports.default=AutoConfPreset;AutoConfPreset.suites=[];