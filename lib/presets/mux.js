'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _utils=require('../utils');var _defs=require('./defs');const CMD_NEW_CONN=0;const CMD_DATA_FRAME=1;const CMD_CLOSE_CONN=2;class MuxPreset extends _defs.IPresetAddressing{constructor(){super();this._adBuf=null;this._adBuf=new _utils.AdvancedBuffer({getPacketLength:this.onReceiving.bind(this)});this._adBuf.on('data',this.onChunkReceived.bind(this))}onDestroy(){this._adBuf.clear();this._adBuf=null}onReceiving(buffer,{fail}){if(buffer.length<2){return}const cmd=buffer[0];switch(cmd){case CMD_NEW_CONN:if(buffer.length<5+buffer[2]){return}return 5+buffer[2];case CMD_DATA_FRAME:if(buffer.length<4){return}return 4+buffer.readUInt16BE(2);case CMD_CLOSE_CONN:return 2;default:fail(`unknown cmd=${cmd} dump=${(0,_utils.dumpHex)(buffer)}`);return-1;}}onChunkReceived(chunk,{broadcast,fail}){const cmd=chunk[0];const cid=chunk[1];switch(cmd){case CMD_NEW_CONN:{const host=chunk.slice(3,-2).toString();const port=chunk.readUInt16BE(3+chunk[2]);if(!(0,_utils.isValidHostname)(host)||!(0,_utils.isValidPort)(port)){return fail(`invalid host or port, host=${host} port=${port}`)}return broadcast({type:_defs.MUX_NEW_CONN,payload:{host,port,cid}})}case CMD_DATA_FRAME:{const dataLen=chunk.readUInt16BE(2);return broadcast({type:_defs.MUX_DATA_FRAME,payload:{cid:cid,data:chunk.slice(-dataLen)}})}case CMD_CLOSE_CONN:return broadcast({type:_defs.MUX_CLOSE_CONN,payload:{cid}});}}createDataFrames(cid,data){const chunks=(0,_utils.getRandomChunks)(data,2048,16383).map(chunk=>Buffer.concat([(0,_utils.numberToBuffer)(CMD_DATA_FRAME,1),(0,_utils.numberToBuffer)(cid,1),(0,_utils.numberToBuffer)(chunk.length),chunk]));return Buffer.concat(chunks)}createNewConn(host,port,cid){const _host=Buffer.from(host);const _port=(0,_utils.numberToBuffer)(port);return Buffer.concat([(0,_utils.numberToBuffer)(CMD_NEW_CONN,1),(0,_utils.numberToBuffer)(cid,1),(0,_utils.numberToBuffer)(_host.length,1),_host,_port])}createCloseConn(cid){return Buffer.concat([(0,_utils.numberToBuffer)(CMD_CLOSE_CONN,1),(0,_utils.numberToBuffer)(cid,1)])}clientOut({buffer},{host,port,cid,isClosing}){if(cid!==undefined){const dataFrames=this.createDataFrames(cid,buffer);if(host&&port){return Buffer.concat([this.createNewConn(host,port,cid),dataFrames])}if(isClosing){return this.createCloseConn(cid)}return dataFrames}}serverOut({buffer},{cid,isClosing}){if(cid!==undefined){if(isClosing){return this.createCloseConn(cid)}return this.createDataFrames(cid,buffer)}}beforeIn({buffer,broadcast,fail}){this._adBuf.put(buffer,{broadcast,fail})}}exports.default=MuxPreset;