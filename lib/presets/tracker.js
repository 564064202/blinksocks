'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _defs=require('./defs');var _actions=require('./actions');var _utils=require('../utils');const TRACK_CHAR_UPLOAD='u';const TRACK_CHAR_DOWNLOAD='d';const TRACK_MAX_SIZE=60;class TrackerPreset extends _defs.IPreset{constructor(...args){var _temp;return _temp=super(...args),this._tracks=[],_temp}onNotified({type,payload}){switch(type){case _actions.CONNECTION_CREATED:{const host=payload.host,port=payload.port,transport=payload.transport;if(this._sourceHost!==host&&this._sourceHost!==port){this._transport=transport;this._sourceHost=host;this._sourcePort=port;this._tracks.push(`${host}:${port}`)}break}case _actions.CONNECT_TO_REMOTE:{const host=payload.host,port=payload.port;if(this._targetHost!==host&&this._targetPort!==port){this._targetHost=host;this._targetPort=port;this._tracks.push(`${host}:${port}`)}break}default:break;}}onDestroy(){if(this._tracks!==null){this.dump(this._tracks)}this._tracks=null}dump(tracks){let strs=[];let dp=0,db=0;let up=0,ub=0;let ud='';var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=tracks[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const el=_step.value;if(el===TRACK_CHAR_UPLOAD||el===TRACK_CHAR_DOWNLOAD){if(ud===el){continue}ud=el}if(Number.isInteger(el)){if(ud===TRACK_CHAR_DOWNLOAD){dp+=1;db+=el}if(ud===TRACK_CHAR_UPLOAD){up+=1;ub+=el}}strs.push(el)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}const perSize=Math.floor(TRACK_MAX_SIZE/2);if(strs.length>TRACK_MAX_SIZE){strs=strs.slice(0,perSize).concat([' ... ']).concat(strs.slice(-perSize))}const summary=this._config.is_client?`out/in = ${up}/${dp}, ${ub}b/${db}b`:`in/out = ${dp}/${up}, ${db}b/${ub}b`;_utils.logger.info(`[tracker:${this._transport}] summary(${summary}) abstract(${strs.join(' ')})`)}beforeOut({buffer}){this._tracks.push(TRACK_CHAR_UPLOAD);this._tracks.push(buffer.length);return buffer}beforeIn({buffer}){this._tracks.push(TRACK_CHAR_DOWNLOAD);this._tracks.push(buffer.length);return buffer}beforeOutUdp(...args){return this.beforeOut(...args)}beforeInUdp(...args){return this.beforeIn(...args)}}exports.default=TrackerPreset;