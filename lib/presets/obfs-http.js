'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _readline=require('readline');var _readline2=_interopRequireDefault(_readline);var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);var _defs=require('./defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class Faker{static _parse(file,callback){if(this._fakes.length>0){callback(this._fakes);return}const parts=[];let part='';const rl=_readline2.default.createInterface({input:_fs2.default.createReadStream(file)});rl.on('line',function(line){switch(line[0]){case'=':case'-':if(part!==''){part+='\r\n';parts.push(part);part=''}break;default:part+=line;part+='\r\n';break;}});rl.on('close',()=>{for(let i=0;i<parts.length;i+=2){const prev=parts[i];const next=parts[i+1];this._fakes.push({request:Buffer.from(prev),response:Buffer.from(next)})}callback(this._fakes)})}static get(file,callback){this._parse(file,callback)}}Faker._fakes=[];class ObfsHttpPreset extends _defs.IPreset{constructor({file}){super();this._isHandshakeDone=false;this._file=null;this._response=null;if(typeof file==='undefined'){throw Error('\'file\' parameter is required.')}this._file=file}clientOut({buffer,next}){if(this._isHandshakeDone){return buffer}else{Faker.get(this._file,fakes=>{const index=_crypto2.default.randomBytes(1)[0]%fakes.length;const request=fakes[index].request;next(Buffer.concat([request,buffer]))})}}serverIn({buffer,next,fail}){if(this._isHandshakeDone){return buffer}else{Faker.get(this._file,fakes=>{const found=fakes.find(({request})=>buffer.indexOf(request)===0);if(typeof found!=='undefined'){this._response=found.response;next(buffer.slice(found.request.length))}else{fail('http header mismatch')}})}}serverOut({buffer}){if(this._isHandshakeDone){return buffer}else{this._isHandshakeDone=true;return Buffer.concat([this._response,buffer])}}clientIn({buffer,next,fail}){if(this._isHandshakeDone){return buffer}else{Faker.get(this._file,fakes=>{const found=fakes.find(({response})=>buffer.indexOf(response)===0);if(typeof found!=='undefined'){next(buffer.slice(found.response.length))}else{fail('http header mismatch')}});this._isHandshakeDone=true}}}exports.default=ObfsHttpPreset;