'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);var _defs=require('./defs');var _utils=require('../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class ObfsRandomPaddingPreset extends _defs.IPreset{constructor(){super();this._adBuf=null;this._adBuf=new _utils.AdvancedBuffer({getPacketLength:this.onReceiving.bind(this)});this._adBuf.on('data',this.onChunkReceived.bind(this))}onDestroy(){this._adBuf.clear();this._adBuf=null}beforeOut({buffer}){const chunks=(0,_utils.getRandomChunks)(buffer,16383,65535).map(data=>{const pLen=(0,_utils.getRandomInt)(0,255);const padding=_crypto2.default.randomBytes(pLen);return Buffer.concat([(0,_utils.numberToBuffer)(pLen,1),padding,(0,_utils.numberToBuffer)(data.length),data])});return Buffer.concat(chunks)}beforeIn({buffer,next}){this._adBuf.put(buffer,{next})}onReceiving(buffer){if(buffer.length<3){return}const pLen=buffer[0];if(buffer.length<1+pLen+2){return}const dLen=buffer.readUInt16BE(1+pLen);if(buffer.length<1+pLen+2+dLen){return}return 1+pLen+2+dLen}onChunkReceived(chunk,{next}){const pLen=chunk[0];next(chunk.slice(1+pLen+2))}}exports.default=ObfsRandomPaddingPreset;