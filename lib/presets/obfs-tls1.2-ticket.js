'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);var _utils=require('../utils');var _defs=require('./defs');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const TLS_STAGE_HELLO=1;const TLS_STAGE_CHANGE_CIPHER_SPEC=2;const TLS_STAGE_APPLICATION_DATA=3;const MIN_AD_PAYLOAD_LEN=2048;const MAX_AD_PAYLOAD_LEN=16383;function ApplicationData(buffer){const len=(0,_utils.numberToBuffer)(buffer.length);return Buffer.concat([(0,_utils.hexStringToBuffer)('170303'),len,buffer])}class ObfsTLS12TicketPreset extends _defs.IPreset{constructor({sni}){super();this._sni=null;this._stage=TLS_STAGE_HELLO;this._pending=null;this._adBuf=null;this.onReceiving=this.onReceiving.bind(this);this.onChunkReceived=this.onChunkReceived.bind(this);this._sni=Buffer.from(sni||'');this._adBuf=new _utils.AdvancedBuffer({getPacketLength:this.onReceiving});this._adBuf.on('data',this.onChunkReceived)}clientOut({buffer,direct}){if(this._stage===TLS_STAGE_HELLO){this._stage=TLS_STAGE_CHANGE_CIPHER_SPEC;this._pending=buffer;const random=[...(0,_utils.getUTC)(),..._crypto2.default.randomBytes(28)];const session=[...(0,_utils.hexStringToBuffer)('20'),..._crypto2.default.randomBytes(32)];const cipher_suites=[...(0,_utils.hexStringToBuffer)('001a'),...(0,_utils.hexStringToBuffer)('c02b'),...(0,_utils.hexStringToBuffer)('c02f'),...(0,_utils.hexStringToBuffer)('c02c'),...(0,_utils.hexStringToBuffer)('c030'),...(0,_utils.hexStringToBuffer)('cc14'),...(0,_utils.hexStringToBuffer)('cc13'),...(0,_utils.hexStringToBuffer)('c013'),...(0,_utils.hexStringToBuffer)('c014'),...(0,_utils.hexStringToBuffer)('009c'),...(0,_utils.hexStringToBuffer)('009d'),...(0,_utils.hexStringToBuffer)('002f'),...(0,_utils.hexStringToBuffer)('0035'),...(0,_utils.hexStringToBuffer)('000a')];const ext_server_name=[...(0,_utils.hexStringToBuffer)('0000'),...(0,_utils.numberToBuffer)(2+1+2+this._sni.length),...(0,_utils.numberToBuffer)(1+2+this._sni.length),...(0,_utils.hexStringToBuffer)('00'),...(0,_utils.numberToBuffer)(this._sni.length),...this._sni];const ticketLen=(0,_utils.getRandomInt)(200,400);const session_ticket=[...(0,_utils.hexStringToBuffer)('0023'),...(0,_utils.numberToBuffer)(ticketLen),..._crypto2.default.randomBytes(ticketLen)];const exts=[...(0,_utils.hexStringToBuffer)('ff01000100'),...ext_server_name,...(0,_utils.hexStringToBuffer)('00170000'),...session_ticket,...(0,_utils.hexStringToBuffer)('000d00140012040308040401050308050501080606010201'),...(0,_utils.hexStringToBuffer)('000500050100000000'),...(0,_utils.hexStringToBuffer)('00120000'),...(0,_utils.hexStringToBuffer)('75500000'),...(0,_utils.hexStringToBuffer)('000b00020100'),...(0,_utils.hexStringToBuffer)('000a0006000400170018')];const body=[...(0,_utils.hexStringToBuffer)('0303'),...random,...session,...cipher_suites,...(0,_utils.hexStringToBuffer)('01'),...(0,_utils.hexStringToBuffer)('00'),...(0,_utils.numberToBuffer)(exts.length),...exts];const header=[...(0,_utils.hexStringToBuffer)('16'),...(0,_utils.hexStringToBuffer)('0301'),...(0,_utils.numberToBuffer)(1+3+body.length),...(0,_utils.hexStringToBuffer)('01'),...(0,_utils.numberToBuffer)(body.length,3)];return direct(Buffer.from([...header,...body]))}if(this._stage===TLS_STAGE_APPLICATION_DATA){const chunks=(0,_utils.getRandomChunks)(buffer,MIN_AD_PAYLOAD_LEN,MAX_AD_PAYLOAD_LEN).map(chunk=>ApplicationData(chunk));return Buffer.concat(chunks)}}serverIn({buffer,next,direct,fail}){if(this._stage===TLS_STAGE_HELLO){this._stage=TLS_STAGE_CHANGE_CIPHER_SPEC;if(buffer.length<200){fail(`TLS handshake header(${buffer.length} bytes) is too short`);return}if(!buffer.slice(0,3).equals((0,_utils.hexStringToBuffer)('160301'))){fail('invalid TLS handshake header');return}const tlsLen=buffer.slice(3,5).readUInt16BE(0);if(tlsLen!==buffer.length-5){fail('unexpected TLS handshake header length');return}const random=[...(0,_utils.getUTC)(),..._crypto2.default.randomBytes(28)];const session=[...(0,_utils.hexStringToBuffer)('20'),..._crypto2.default.randomBytes(32)];const exts=[...(0,_utils.hexStringToBuffer)('ff01000100'),...(0,_utils.hexStringToBuffer)('00050000'),...(0,_utils.hexStringToBuffer)('00170000')];const body=[...(0,_utils.hexStringToBuffer)('0303'),...random,...session,...(0,_utils.hexStringToBuffer)('c02f'),...(0,_utils.hexStringToBuffer)('00'),...(0,_utils.numberToBuffer)(exts.length),...exts];const header=[...(0,_utils.hexStringToBuffer)('16'),...(0,_utils.hexStringToBuffer)('0303'),...(0,_utils.numberToBuffer)(1+3+body.length),...(0,_utils.hexStringToBuffer)('02'),...(0,_utils.numberToBuffer)(body.length,3)];const server_hello=[...header,...body];const change_cipher_spec=[...(0,_utils.hexStringToBuffer)('140303000101')];const finishedLen=(0,_utils.getRandomInt)(32,40);const finished=[...(0,_utils.hexStringToBuffer)('16'),...(0,_utils.hexStringToBuffer)('0303'),...(0,_utils.numberToBuffer)(finishedLen),..._crypto2.default.randomBytes(finishedLen)];return direct(Buffer.from([...server_hello,...change_cipher_spec,...finished]),true)}let _buffer=buffer;if(this._stage===TLS_STAGE_CHANGE_CIPHER_SPEC){this._stage=TLS_STAGE_APPLICATION_DATA;_buffer=buffer.slice(43)}this._adBuf.put(_buffer,{next,fail})}serverOut({buffer}){const chunks=(0,_utils.getRandomChunks)(buffer,MIN_AD_PAYLOAD_LEN,MAX_AD_PAYLOAD_LEN).map(chunk=>ApplicationData(chunk));return Buffer.concat(chunks)}clientIn({buffer,next,direct,fail}){if(this._stage===TLS_STAGE_CHANGE_CIPHER_SPEC){this._stage=TLS_STAGE_APPLICATION_DATA;const change_cipher_spec=[...(0,_utils.hexStringToBuffer)('140303000101')];const finished=[...(0,_utils.hexStringToBuffer)('16'),...(0,_utils.hexStringToBuffer)('0303'),...(0,_utils.hexStringToBuffer)('0020'),..._crypto2.default.randomBytes(32)];const chunks=(0,_utils.getRandomChunks)(this._pending,MIN_AD_PAYLOAD_LEN,MAX_AD_PAYLOAD_LEN).map(chunk=>ApplicationData(chunk));this._pending=null;return direct(Buffer.from([...change_cipher_spec,...finished,...Buffer.concat(chunks)]),true)}this._adBuf.put(buffer,{next,fail})}onReceiving(buffer){if(buffer.length<5){return}return 5+buffer.readUInt16BE(3)}onChunkReceived(chunk,{next}){next(chunk.slice(5))}}exports.default=ObfsTLS12TicketPreset;